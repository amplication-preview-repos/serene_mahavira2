/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanyJobApply } from "./CompanyJobApply";
import { CompanyJobApplyCountArgs } from "./CompanyJobApplyCountArgs";
import { CompanyJobApplyFindManyArgs } from "./CompanyJobApplyFindManyArgs";
import { CompanyJobApplyFindUniqueArgs } from "./CompanyJobApplyFindUniqueArgs";
import { CreateCompanyJobApplyArgs } from "./CreateCompanyJobApplyArgs";
import { UpdateCompanyJobApplyArgs } from "./UpdateCompanyJobApplyArgs";
import { DeleteCompanyJobApplyArgs } from "./DeleteCompanyJobApplyArgs";
import { CompanyJobApplyService } from "../companyJobApply.service";
@graphql.Resolver(() => CompanyJobApply)
export class CompanyJobApplyResolverBase {
  constructor(protected readonly service: CompanyJobApplyService) {}

  async _companyJobAppliesMeta(
    @graphql.Args() args: CompanyJobApplyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanyJobApply])
  async companyJobApplies(
    @graphql.Args() args: CompanyJobApplyFindManyArgs
  ): Promise<CompanyJobApply[]> {
    return this.service.companyJobApplies(args);
  }

  @graphql.Query(() => CompanyJobApply, { nullable: true })
  async companyJobApply(
    @graphql.Args() args: CompanyJobApplyFindUniqueArgs
  ): Promise<CompanyJobApply | null> {
    const result = await this.service.companyJobApply(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanyJobApply)
  async createCompanyJobApply(
    @graphql.Args() args: CreateCompanyJobApplyArgs
  ): Promise<CompanyJobApply> {
    return await this.service.createCompanyJobApply({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CompanyJobApply)
  async updateCompanyJobApply(
    @graphql.Args() args: UpdateCompanyJobApplyArgs
  ): Promise<CompanyJobApply | null> {
    try {
      return await this.service.updateCompanyJobApply({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanyJobApply)
  async deleteCompanyJobApply(
    @graphql.Args() args: DeleteCompanyJobApplyArgs
  ): Promise<CompanyJobApply | null> {
    try {
      return await this.service.deleteCompanyJobApply(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
