/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanyStructure } from "./CompanyStructure";
import { CompanyStructureCountArgs } from "./CompanyStructureCountArgs";
import { CompanyStructureFindManyArgs } from "./CompanyStructureFindManyArgs";
import { CompanyStructureFindUniqueArgs } from "./CompanyStructureFindUniqueArgs";
import { CreateCompanyStructureArgs } from "./CreateCompanyStructureArgs";
import { UpdateCompanyStructureArgs } from "./UpdateCompanyStructureArgs";
import { DeleteCompanyStructureArgs } from "./DeleteCompanyStructureArgs";
import { CompanyStructureService } from "../companyStructure.service";
@graphql.Resolver(() => CompanyStructure)
export class CompanyStructureResolverBase {
  constructor(protected readonly service: CompanyStructureService) {}

  async _companyStructuresMeta(
    @graphql.Args() args: CompanyStructureCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanyStructure])
  async companyStructures(
    @graphql.Args() args: CompanyStructureFindManyArgs
  ): Promise<CompanyStructure[]> {
    return this.service.companyStructures(args);
  }

  @graphql.Query(() => CompanyStructure, { nullable: true })
  async companyStructure(
    @graphql.Args() args: CompanyStructureFindUniqueArgs
  ): Promise<CompanyStructure | null> {
    const result = await this.service.companyStructure(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanyStructure)
  async createCompanyStructure(
    @graphql.Args() args: CreateCompanyStructureArgs
  ): Promise<CompanyStructure> {
    return await this.service.createCompanyStructure({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CompanyStructure)
  async updateCompanyStructure(
    @graphql.Args() args: UpdateCompanyStructureArgs
  ): Promise<CompanyStructure | null> {
    try {
      return await this.service.updateCompanyStructure({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanyStructure)
  async deleteCompanyStructure(
    @graphql.Args() args: DeleteCompanyStructureArgs
  ): Promise<CompanyStructure | null> {
    try {
      return await this.service.deleteCompanyStructure(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
