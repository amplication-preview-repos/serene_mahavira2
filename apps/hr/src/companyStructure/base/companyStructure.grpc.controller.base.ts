/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { CompanyStructureService } from "../companyStructure.service";
import { CompanyStructureCreateInput } from "./CompanyStructureCreateInput";
import { CompanyStructureWhereInput } from "./CompanyStructureWhereInput";
import { CompanyStructureWhereUniqueInput } from "./CompanyStructureWhereUniqueInput";
import { CompanyStructureFindManyArgs } from "./CompanyStructureFindManyArgs";
import { CompanyStructureUpdateInput } from "./CompanyStructureUpdateInput";
import { CompanyStructure } from "./CompanyStructure";

export class CompanyStructureGrpcControllerBase {
  constructor(protected readonly service: CompanyStructureService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CompanyStructure })
  @GrpcMethod("CompanyStructureService", "createCompanyStructure")
  async createCompanyStructure(
    @common.Body() data: CompanyStructureCreateInput
  ): Promise<CompanyStructure> {
    return await this.service.createCompanyStructure({
      data: data,
      select: {
        code: true,
        description: true,
        id: true,
        name: true,
        parentId: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CompanyStructure] })
  @ApiNestedQuery(CompanyStructureFindManyArgs)
  @GrpcMethod("CompanyStructureService", "companyStructures")
  async companyStructures(
    @common.Req() request: Request
  ): Promise<CompanyStructure[]> {
    const args = plainToClass(CompanyStructureFindManyArgs, request.query);
    return this.service.companyStructures({
      ...args,
      select: {
        code: true,
        description: true,
        id: true,
        name: true,
        parentId: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CompanyStructure })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CompanyStructureService", "companyStructure")
  async companyStructure(
    @common.Param() params: CompanyStructureWhereUniqueInput
  ): Promise<CompanyStructure | null> {
    const result = await this.service.companyStructure({
      where: params,
      select: {
        code: true,
        description: true,
        id: true,
        name: true,
        parentId: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CompanyStructure })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CompanyStructureService", "updateCompanyStructure")
  async updateCompanyStructure(
    @common.Param() params: CompanyStructureWhereUniqueInput,
    @common.Body() data: CompanyStructureUpdateInput
  ): Promise<CompanyStructure | null> {
    try {
      return await this.service.updateCompanyStructure({
        where: params,
        data: data,
        select: {
          code: true,
          description: true,
          id: true,
          name: true,
          parentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CompanyStructure })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("CompanyStructureService", "deleteCompanyStructure")
  async deleteCompanyStructure(
    @common.Param() params: CompanyStructureWhereUniqueInput
  ): Promise<CompanyStructure | null> {
    try {
      return await this.service.deleteCompanyStructure({
        where: params,
        select: {
          code: true,
          description: true,
          id: true,
          name: true,
          parentId: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
