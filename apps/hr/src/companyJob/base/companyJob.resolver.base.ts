/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanyJob } from "./CompanyJob";
import { CompanyJobCountArgs } from "./CompanyJobCountArgs";
import { CompanyJobFindManyArgs } from "./CompanyJobFindManyArgs";
import { CompanyJobFindUniqueArgs } from "./CompanyJobFindUniqueArgs";
import { CreateCompanyJobArgs } from "./CreateCompanyJobArgs";
import { UpdateCompanyJobArgs } from "./UpdateCompanyJobArgs";
import { DeleteCompanyJobArgs } from "./DeleteCompanyJobArgs";
import { CompanyJobService } from "../companyJob.service";
@graphql.Resolver(() => CompanyJob)
export class CompanyJobResolverBase {
  constructor(protected readonly service: CompanyJobService) {}

  async _companyJobsMeta(
    @graphql.Args() args: CompanyJobCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanyJob])
  async companyJobs(
    @graphql.Args() args: CompanyJobFindManyArgs
  ): Promise<CompanyJob[]> {
    return this.service.companyJobs(args);
  }

  @graphql.Query(() => CompanyJob, { nullable: true })
  async companyJob(
    @graphql.Args() args: CompanyJobFindUniqueArgs
  ): Promise<CompanyJob | null> {
    const result = await this.service.companyJob(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanyJob)
  async createCompanyJob(
    @graphql.Args() args: CreateCompanyJobArgs
  ): Promise<CompanyJob> {
    return await this.service.createCompanyJob({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CompanyJob)
  async updateCompanyJob(
    @graphql.Args() args: UpdateCompanyJobArgs
  ): Promise<CompanyJob | null> {
    try {
      return await this.service.updateCompanyJob({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanyJob)
  async deleteCompanyJob(
    @graphql.Args() args: DeleteCompanyJobArgs
  ): Promise<CompanyJob | null> {
    try {
      return await this.service.deleteCompanyJob(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
