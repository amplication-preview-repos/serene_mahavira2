/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanyCalendar } from "./CompanyCalendar";
import { CompanyCalendarCountArgs } from "./CompanyCalendarCountArgs";
import { CompanyCalendarFindManyArgs } from "./CompanyCalendarFindManyArgs";
import { CompanyCalendarFindUniqueArgs } from "./CompanyCalendarFindUniqueArgs";
import { CreateCompanyCalendarArgs } from "./CreateCompanyCalendarArgs";
import { UpdateCompanyCalendarArgs } from "./UpdateCompanyCalendarArgs";
import { DeleteCompanyCalendarArgs } from "./DeleteCompanyCalendarArgs";
import { UserInfo } from "../../userInfo/base/UserInfo";
import { CompanyCalendarService } from "../companyCalendar.service";
@graphql.Resolver(() => CompanyCalendar)
export class CompanyCalendarResolverBase {
  constructor(protected readonly service: CompanyCalendarService) {}

  async _companyCalendarsMeta(
    @graphql.Args() args: CompanyCalendarCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanyCalendar])
  async companyCalendars(
    @graphql.Args() args: CompanyCalendarFindManyArgs
  ): Promise<CompanyCalendar[]> {
    return this.service.companyCalendars(args);
  }

  @graphql.Query(() => CompanyCalendar, { nullable: true })
  async companyCalendar(
    @graphql.Args() args: CompanyCalendarFindUniqueArgs
  ): Promise<CompanyCalendar | null> {
    const result = await this.service.companyCalendar(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanyCalendar)
  async createCompanyCalendar(
    @graphql.Args() args: CreateCompanyCalendarArgs
  ): Promise<CompanyCalendar> {
    return await this.service.createCompanyCalendar({
      ...args,
      data: {
        ...args.data,

        userInfo: args.data.userInfo
          ? {
              connect: args.data.userInfo,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CompanyCalendar)
  async updateCompanyCalendar(
    @graphql.Args() args: UpdateCompanyCalendarArgs
  ): Promise<CompanyCalendar | null> {
    try {
      return await this.service.updateCompanyCalendar({
        ...args,
        data: {
          ...args.data,

          userInfo: args.data.userInfo
            ? {
                connect: args.data.userInfo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanyCalendar)
  async deleteCompanyCalendar(
    @graphql.Args() args: DeleteCompanyCalendarArgs
  ): Promise<CompanyCalendar | null> {
    try {
      return await this.service.deleteCompanyCalendar(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserInfo, {
    nullable: true,
    name: "userInfo",
  })
  async getUserInfo(
    @graphql.Parent() parent: CompanyCalendar
  ): Promise<UserInfo | null> {
    const result = await this.service.getUserInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
