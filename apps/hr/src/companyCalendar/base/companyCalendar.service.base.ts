/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CompanyCalendar, // @ts-ignore
  UserInfo,
} from "@prisma/client";

export class CompanyCalendarServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CompanyCalendarCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyCalendarCountArgs>
  ): Promise<number> {
    return this.prisma.companyCalendar.count(args);
  }

  async companyCalendars<T extends Prisma.CompanyCalendarFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyCalendarFindManyArgs>
  ): Promise<CompanyCalendar[]> {
    return this.prisma.companyCalendar.findMany(args);
  }
  async companyCalendar<T extends Prisma.CompanyCalendarFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyCalendarFindUniqueArgs>
  ): Promise<CompanyCalendar | null> {
    return this.prisma.companyCalendar.findUnique(args);
  }
  async createCompanyCalendar<T extends Prisma.CompanyCalendarCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyCalendarCreateArgs>
  ): Promise<CompanyCalendar> {
    return this.prisma.companyCalendar.create<T>(args);
  }
  async updateCompanyCalendar<T extends Prisma.CompanyCalendarUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyCalendarUpdateArgs>
  ): Promise<CompanyCalendar> {
    return this.prisma.companyCalendar.update<T>(args);
  }
  async deleteCompanyCalendar<T extends Prisma.CompanyCalendarDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyCalendarDeleteArgs>
  ): Promise<CompanyCalendar> {
    return this.prisma.companyCalendar.delete(args);
  }

  async getUserInfo(parentId: string): Promise<UserInfo | null> {
    return this.prisma.companyCalendar
      .findUnique({
        where: { id: parentId },
      })
      .userInfo();
  }
}
