/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanyNew } from "./CompanyNew";
import { CompanyNewCountArgs } from "./CompanyNewCountArgs";
import { CompanyNewFindManyArgs } from "./CompanyNewFindManyArgs";
import { CompanyNewFindUniqueArgs } from "./CompanyNewFindUniqueArgs";
import { CreateCompanyNewArgs } from "./CreateCompanyNewArgs";
import { UpdateCompanyNewArgs } from "./UpdateCompanyNewArgs";
import { DeleteCompanyNewArgs } from "./DeleteCompanyNewArgs";
import { UserInfo } from "../../userInfo/base/UserInfo";
import { CompanyNewService } from "../companyNew.service";
@graphql.Resolver(() => CompanyNew)
export class CompanyNewResolverBase {
  constructor(protected readonly service: CompanyNewService) {}

  async _companyNewsMeta(
    @graphql.Args() args: CompanyNewCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanyNew])
  async companyNews(
    @graphql.Args() args: CompanyNewFindManyArgs
  ): Promise<CompanyNew[]> {
    return this.service.companyNews(args);
  }

  @graphql.Query(() => CompanyNew, { nullable: true })
  async companyNew(
    @graphql.Args() args: CompanyNewFindUniqueArgs
  ): Promise<CompanyNew | null> {
    const result = await this.service.companyNew(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanyNew)
  async createCompanyNew(
    @graphql.Args() args: CreateCompanyNewArgs
  ): Promise<CompanyNew> {
    return await this.service.createCompanyNew({
      ...args,
      data: {
        ...args.data,

        userInfo: args.data.userInfo
          ? {
              connect: args.data.userInfo,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CompanyNew)
  async updateCompanyNew(
    @graphql.Args() args: UpdateCompanyNewArgs
  ): Promise<CompanyNew | null> {
    try {
      return await this.service.updateCompanyNew({
        ...args,
        data: {
          ...args.data,

          userInfo: args.data.userInfo
            ? {
                connect: args.data.userInfo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanyNew)
  async deleteCompanyNew(
    @graphql.Args() args: DeleteCompanyNewArgs
  ): Promise<CompanyNew | null> {
    try {
      return await this.service.deleteCompanyNew(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserInfo, {
    nullable: true,
    name: "userInfo",
  })
  async getUserInfo(
    @graphql.Parent() parent: CompanyNew
  ): Promise<UserInfo | null> {
    const result = await this.service.getUserInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
