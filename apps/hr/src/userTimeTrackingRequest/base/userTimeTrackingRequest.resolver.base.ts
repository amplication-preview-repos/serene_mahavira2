/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserTimeTrackingRequest } from "./UserTimeTrackingRequest";
import { UserTimeTrackingRequestCountArgs } from "./UserTimeTrackingRequestCountArgs";
import { UserTimeTrackingRequestFindManyArgs } from "./UserTimeTrackingRequestFindManyArgs";
import { UserTimeTrackingRequestFindUniqueArgs } from "./UserTimeTrackingRequestFindUniqueArgs";
import { CreateUserTimeTrackingRequestArgs } from "./CreateUserTimeTrackingRequestArgs";
import { UpdateUserTimeTrackingRequestArgs } from "./UpdateUserTimeTrackingRequestArgs";
import { DeleteUserTimeTrackingRequestArgs } from "./DeleteUserTimeTrackingRequestArgs";
import { UserTimeTrackingRequestDetailFindManyArgs } from "../../userTimeTrackingRequestDetail/base/UserTimeTrackingRequestDetailFindManyArgs";
import { UserTimeTrackingRequestDetail } from "../../userTimeTrackingRequestDetail/base/UserTimeTrackingRequestDetail";
import { UserInfo } from "../../userInfo/base/UserInfo";
import { UserTimeTrackingRequestService } from "../userTimeTrackingRequest.service";
@graphql.Resolver(() => UserTimeTrackingRequest)
export class UserTimeTrackingRequestResolverBase {
  constructor(protected readonly service: UserTimeTrackingRequestService) {}

  async _userTimeTrackingRequestsMeta(
    @graphql.Args() args: UserTimeTrackingRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserTimeTrackingRequest])
  async userTimeTrackingRequests(
    @graphql.Args() args: UserTimeTrackingRequestFindManyArgs
  ): Promise<UserTimeTrackingRequest[]> {
    return this.service.userTimeTrackingRequests(args);
  }

  @graphql.Query(() => UserTimeTrackingRequest, { nullable: true })
  async userTimeTrackingRequest(
    @graphql.Args() args: UserTimeTrackingRequestFindUniqueArgs
  ): Promise<UserTimeTrackingRequest | null> {
    const result = await this.service.userTimeTrackingRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserTimeTrackingRequest)
  async createUserTimeTrackingRequest(
    @graphql.Args() args: CreateUserTimeTrackingRequestArgs
  ): Promise<UserTimeTrackingRequest> {
    return await this.service.createUserTimeTrackingRequest({
      ...args,
      data: {
        ...args.data,

        approverInfo: args.data.approverInfo
          ? {
              connect: args.data.approverInfo,
            }
          : undefined,

        requesterInfo: args.data.requesterInfo
          ? {
              connect: args.data.requesterInfo,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserTimeTrackingRequest)
  async updateUserTimeTrackingRequest(
    @graphql.Args() args: UpdateUserTimeTrackingRequestArgs
  ): Promise<UserTimeTrackingRequest | null> {
    try {
      return await this.service.updateUserTimeTrackingRequest({
        ...args,
        data: {
          ...args.data,

          approverInfo: args.data.approverInfo
            ? {
                connect: args.data.approverInfo,
              }
            : undefined,

          requesterInfo: args.data.requesterInfo
            ? {
                connect: args.data.requesterInfo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserTimeTrackingRequest)
  async deleteUserTimeTrackingRequest(
    @graphql.Args() args: DeleteUserTimeTrackingRequestArgs
  ): Promise<UserTimeTrackingRequest | null> {
    try {
      return await this.service.deleteUserTimeTrackingRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [UserTimeTrackingRequestDetail], {
    name: "details",
  })
  async findDetails(
    @graphql.Parent() parent: UserTimeTrackingRequest,
    @graphql.Args() args: UserTimeTrackingRequestDetailFindManyArgs
  ): Promise<UserTimeTrackingRequestDetail[]> {
    const results = await this.service.findDetails(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => UserInfo, {
    nullable: true,
    name: "approverInfo",
  })
  async getApproverInfo(
    @graphql.Parent() parent: UserTimeTrackingRequest
  ): Promise<UserInfo | null> {
    const result = await this.service.getApproverInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserInfo, {
    nullable: true,
    name: "requesterInfo",
  })
  async getRequesterInfo(
    @graphql.Parent() parent: UserTimeTrackingRequest
  ): Promise<UserInfo | null> {
    const result = await this.service.getRequesterInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
