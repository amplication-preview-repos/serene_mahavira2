/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserNotification } from "./UserNotification";
import { UserNotificationCountArgs } from "./UserNotificationCountArgs";
import { UserNotificationFindManyArgs } from "./UserNotificationFindManyArgs";
import { UserNotificationFindUniqueArgs } from "./UserNotificationFindUniqueArgs";
import { CreateUserNotificationArgs } from "./CreateUserNotificationArgs";
import { UpdateUserNotificationArgs } from "./UpdateUserNotificationArgs";
import { DeleteUserNotificationArgs } from "./DeleteUserNotificationArgs";
import { UserNotificationService } from "../userNotification.service";
@graphql.Resolver(() => UserNotification)
export class UserNotificationResolverBase {
  constructor(protected readonly service: UserNotificationService) {}

  async _userNotificationsMeta(
    @graphql.Args() args: UserNotificationCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserNotification])
  async userNotifications(
    @graphql.Args() args: UserNotificationFindManyArgs
  ): Promise<UserNotification[]> {
    return this.service.userNotifications(args);
  }

  @graphql.Query(() => UserNotification, { nullable: true })
  async userNotification(
    @graphql.Args() args: UserNotificationFindUniqueArgs
  ): Promise<UserNotification | null> {
    const result = await this.service.userNotification(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserNotification)
  async createUserNotification(
    @graphql.Args() args: CreateUserNotificationArgs
  ): Promise<UserNotification> {
    return await this.service.createUserNotification({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserNotification)
  async updateUserNotification(
    @graphql.Args() args: UpdateUserNotificationArgs
  ): Promise<UserNotification | null> {
    try {
      return await this.service.updateUserNotification({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserNotification)
  async deleteUserNotification(
    @graphql.Args() args: DeleteUserNotificationArgs
  ): Promise<UserNotification | null> {
    try {
      return await this.service.deleteUserNotification(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
