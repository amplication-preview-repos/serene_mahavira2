/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CompanySurveyService } from "../companySurvey.service";
import { CompanySurveyCreateInput } from "./CompanySurveyCreateInput";
import { CompanySurvey } from "./CompanySurvey";
import { CompanySurveyFindManyArgs } from "./CompanySurveyFindManyArgs";
import { CompanySurveyWhereUniqueInput } from "./CompanySurveyWhereUniqueInput";
import { CompanySurveyUpdateInput } from "./CompanySurveyUpdateInput";
import { CompanySurveyFieldFindManyArgs } from "../../companySurveyField/base/CompanySurveyFieldFindManyArgs";
import { CompanySurveyField } from "../../companySurveyField/base/CompanySurveyField";
import { CompanySurveyFieldWhereUniqueInput } from "../../companySurveyField/base/CompanySurveyFieldWhereUniqueInput";
import { UserSurveyResponseFindManyArgs } from "../../userSurveyResponse/base/UserSurveyResponseFindManyArgs";
import { UserSurveyResponse } from "../../userSurveyResponse/base/UserSurveyResponse";
import { UserSurveyResponseWhereUniqueInput } from "../../userSurveyResponse/base/UserSurveyResponseWhereUniqueInput";

export class CompanySurveyControllerBase {
  constructor(protected readonly service: CompanySurveyService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CompanySurvey })
  async createCompanySurvey(
    @common.Body() data: CompanySurveyCreateInput
  ): Promise<CompanySurvey> {
    return await this.service.createCompanySurvey({
      data: data,
      select: {
        description: true,
        id: true,
        name: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CompanySurvey] })
  @ApiNestedQuery(CompanySurveyFindManyArgs)
  async companySurveys(
    @common.Req() request: Request
  ): Promise<CompanySurvey[]> {
    const args = plainToClass(CompanySurveyFindManyArgs, request.query);
    return this.service.companySurveys({
      ...args,
      select: {
        description: true,
        id: true,
        name: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CompanySurvey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async companySurvey(
    @common.Param() params: CompanySurveyWhereUniqueInput
  ): Promise<CompanySurvey | null> {
    const result = await this.service.companySurvey({
      where: params,
      select: {
        description: true,
        id: true,
        name: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CompanySurvey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCompanySurvey(
    @common.Param() params: CompanySurveyWhereUniqueInput,
    @common.Body() data: CompanySurveyUpdateInput
  ): Promise<CompanySurvey | null> {
    try {
      return await this.service.updateCompanySurvey({
        where: params,
        data: data,
        select: {
          description: true,
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CompanySurvey })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCompanySurvey(
    @common.Param() params: CompanySurveyWhereUniqueInput
  ): Promise<CompanySurvey | null> {
    try {
      return await this.service.deleteCompanySurvey({
        where: params,
        select: {
          description: true,
          id: true,
          name: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/companySurveyFields")
  @ApiNestedQuery(CompanySurveyFieldFindManyArgs)
  async findCompanySurveyFields(
    @common.Req() request: Request,
    @common.Param() params: CompanySurveyWhereUniqueInput
  ): Promise<CompanySurveyField[]> {
    const query = plainToClass(CompanySurveyFieldFindManyArgs, request.query);
    const results = await this.service.findCompanySurveyFields(params.id, {
      ...query,
      select: {
        companySurvey: {
          select: {
            id: true,
          },
        },

        fieldConfig: true,
        fieldType: true,
        id: true,
        isRequired: true,
        label: true,
        position: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/companySurveyFields")
  async connectCompanySurveyFields(
    @common.Param() params: CompanySurveyWhereUniqueInput,
    @common.Body() body: CompanySurveyFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companySurveyFields: {
        connect: body,
      },
    };
    await this.service.updateCompanySurvey({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/companySurveyFields")
  async updateCompanySurveyFields(
    @common.Param() params: CompanySurveyWhereUniqueInput,
    @common.Body() body: CompanySurveyFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companySurveyFields: {
        set: body,
      },
    };
    await this.service.updateCompanySurvey({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/companySurveyFields")
  async disconnectCompanySurveyFields(
    @common.Param() params: CompanySurveyWhereUniqueInput,
    @common.Body() body: CompanySurveyFieldWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companySurveyFields: {
        disconnect: body,
      },
    };
    await this.service.updateCompanySurvey({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userSurveyResponse")
  @ApiNestedQuery(UserSurveyResponseFindManyArgs)
  async findUserSurveyResponse(
    @common.Req() request: Request,
    @common.Param() params: CompanySurveyWhereUniqueInput
  ): Promise<UserSurveyResponse[]> {
    const query = plainToClass(UserSurveyResponseFindManyArgs, request.query);
    const results = await this.service.findUserSurveyResponse(params.id, {
      ...query,
      select: {
        companySurvey: {
          select: {
            id: true,
          },
        },

        id: true,
        responseJson: true,
        submittedAt: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userSurveyResponse")
  async connectUserSurveyResponse(
    @common.Param() params: CompanySurveyWhereUniqueInput,
    @common.Body() body: UserSurveyResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSurveyResponse: {
        connect: body,
      },
    };
    await this.service.updateCompanySurvey({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userSurveyResponse")
  async updateUserSurveyResponse(
    @common.Param() params: CompanySurveyWhereUniqueInput,
    @common.Body() body: UserSurveyResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSurveyResponse: {
        set: body,
      },
    };
    await this.service.updateCompanySurvey({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userSurveyResponse")
  async disconnectUserSurveyResponse(
    @common.Param() params: CompanySurveyWhereUniqueInput,
    @common.Body() body: UserSurveyResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSurveyResponse: {
        disconnect: body,
      },
    };
    await this.service.updateCompanySurvey({
      where: params,
      data,
      select: { id: true },
    });
  }
}
