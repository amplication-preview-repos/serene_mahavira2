/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CompanySurvey, // @ts-ignore
  CompanySurveyField, // @ts-ignore
  UserSurveyResponse,
} from "@prisma/client";

export class CompanySurveyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CompanySurveyCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyCountArgs>
  ): Promise<number> {
    return this.prisma.companySurvey.count(args);
  }

  async companySurveys<T extends Prisma.CompanySurveyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyFindManyArgs>
  ): Promise<CompanySurvey[]> {
    return this.prisma.companySurvey.findMany(args);
  }
  async companySurvey<T extends Prisma.CompanySurveyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyFindUniqueArgs>
  ): Promise<CompanySurvey | null> {
    return this.prisma.companySurvey.findUnique(args);
  }
  async createCompanySurvey<T extends Prisma.CompanySurveyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyCreateArgs>
  ): Promise<CompanySurvey> {
    return this.prisma.companySurvey.create<T>(args);
  }
  async updateCompanySurvey<T extends Prisma.CompanySurveyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyUpdateArgs>
  ): Promise<CompanySurvey> {
    return this.prisma.companySurvey.update<T>(args);
  }
  async deleteCompanySurvey<T extends Prisma.CompanySurveyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyDeleteArgs>
  ): Promise<CompanySurvey> {
    return this.prisma.companySurvey.delete(args);
  }

  async findCompanySurveyFields(
    parentId: string,
    args: Prisma.CompanySurveyFieldFindManyArgs
  ): Promise<CompanySurveyField[]> {
    return this.prisma.companySurvey
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .companySurveyFields(args);
  }

  async findUserSurveyResponse(
    parentId: string,
    args: Prisma.UserSurveyResponseFindManyArgs
  ): Promise<UserSurveyResponse[]> {
    return this.prisma.companySurvey
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userSurveyResponse(args);
  }
}
