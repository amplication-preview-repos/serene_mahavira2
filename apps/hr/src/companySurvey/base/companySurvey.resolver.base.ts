/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanySurvey } from "./CompanySurvey";
import { CompanySurveyCountArgs } from "./CompanySurveyCountArgs";
import { CompanySurveyFindManyArgs } from "./CompanySurveyFindManyArgs";
import { CompanySurveyFindUniqueArgs } from "./CompanySurveyFindUniqueArgs";
import { CreateCompanySurveyArgs } from "./CreateCompanySurveyArgs";
import { UpdateCompanySurveyArgs } from "./UpdateCompanySurveyArgs";
import { DeleteCompanySurveyArgs } from "./DeleteCompanySurveyArgs";
import { CompanySurveyFieldFindManyArgs } from "../../companySurveyField/base/CompanySurveyFieldFindManyArgs";
import { CompanySurveyField } from "../../companySurveyField/base/CompanySurveyField";
import { UserSurveyResponseFindManyArgs } from "../../userSurveyResponse/base/UserSurveyResponseFindManyArgs";
import { UserSurveyResponse } from "../../userSurveyResponse/base/UserSurveyResponse";
import { CompanySurveyService } from "../companySurvey.service";
@graphql.Resolver(() => CompanySurvey)
export class CompanySurveyResolverBase {
  constructor(protected readonly service: CompanySurveyService) {}

  async _companySurveysMeta(
    @graphql.Args() args: CompanySurveyCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanySurvey])
  async companySurveys(
    @graphql.Args() args: CompanySurveyFindManyArgs
  ): Promise<CompanySurvey[]> {
    return this.service.companySurveys(args);
  }

  @graphql.Query(() => CompanySurvey, { nullable: true })
  async companySurvey(
    @graphql.Args() args: CompanySurveyFindUniqueArgs
  ): Promise<CompanySurvey | null> {
    const result = await this.service.companySurvey(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanySurvey)
  async createCompanySurvey(
    @graphql.Args() args: CreateCompanySurveyArgs
  ): Promise<CompanySurvey> {
    return await this.service.createCompanySurvey({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CompanySurvey)
  async updateCompanySurvey(
    @graphql.Args() args: UpdateCompanySurveyArgs
  ): Promise<CompanySurvey | null> {
    try {
      return await this.service.updateCompanySurvey({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanySurvey)
  async deleteCompanySurvey(
    @graphql.Args() args: DeleteCompanySurveyArgs
  ): Promise<CompanySurvey | null> {
    try {
      return await this.service.deleteCompanySurvey(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [CompanySurveyField], {
    name: "companySurveyFields",
  })
  async findCompanySurveyFields(
    @graphql.Parent() parent: CompanySurvey,
    @graphql.Args() args: CompanySurveyFieldFindManyArgs
  ): Promise<CompanySurveyField[]> {
    const results = await this.service.findCompanySurveyFields(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserSurveyResponse], {
    name: "userSurveyResponse",
  })
  async findUserSurveyResponse(
    @graphql.Parent() parent: CompanySurvey,
    @graphql.Args() args: UserSurveyResponseFindManyArgs
  ): Promise<UserSurveyResponse[]> {
    const results = await this.service.findUserSurveyResponse(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
