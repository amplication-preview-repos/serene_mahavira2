/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CompanySurveyField, // @ts-ignore
  CompanySurvey,
} from "@prisma/client";

export class CompanySurveyFieldServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CompanySurveyFieldCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyFieldCountArgs>
  ): Promise<number> {
    return this.prisma.companySurveyField.count(args);
  }

  async companySurveyFields<T extends Prisma.CompanySurveyFieldFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyFieldFindManyArgs>
  ): Promise<CompanySurveyField[]> {
    return this.prisma.companySurveyField.findMany(args);
  }
  async companySurveyField<T extends Prisma.CompanySurveyFieldFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyFieldFindUniqueArgs>
  ): Promise<CompanySurveyField | null> {
    return this.prisma.companySurveyField.findUnique(args);
  }
  async createCompanySurveyField<T extends Prisma.CompanySurveyFieldCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyFieldCreateArgs>
  ): Promise<CompanySurveyField> {
    return this.prisma.companySurveyField.create<T>(args);
  }
  async updateCompanySurveyField<T extends Prisma.CompanySurveyFieldUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyFieldUpdateArgs>
  ): Promise<CompanySurveyField> {
    return this.prisma.companySurveyField.update<T>(args);
  }
  async deleteCompanySurveyField<T extends Prisma.CompanySurveyFieldDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanySurveyFieldDeleteArgs>
  ): Promise<CompanySurveyField> {
    return this.prisma.companySurveyField.delete(args);
  }

  async getCompanySurvey(parentId: string): Promise<CompanySurvey | null> {
    return this.prisma.companySurveyField
      .findUnique({
        where: { id: parentId },
      })
      .companySurvey();
  }
}
