/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanySurveyField } from "./CompanySurveyField";
import { CompanySurveyFieldCountArgs } from "./CompanySurveyFieldCountArgs";
import { CompanySurveyFieldFindManyArgs } from "./CompanySurveyFieldFindManyArgs";
import { CompanySurveyFieldFindUniqueArgs } from "./CompanySurveyFieldFindUniqueArgs";
import { CreateCompanySurveyFieldArgs } from "./CreateCompanySurveyFieldArgs";
import { UpdateCompanySurveyFieldArgs } from "./UpdateCompanySurveyFieldArgs";
import { DeleteCompanySurveyFieldArgs } from "./DeleteCompanySurveyFieldArgs";
import { CompanySurvey } from "../../companySurvey/base/CompanySurvey";
import { CompanySurveyFieldService } from "../companySurveyField.service";
@graphql.Resolver(() => CompanySurveyField)
export class CompanySurveyFieldResolverBase {
  constructor(protected readonly service: CompanySurveyFieldService) {}

  async _companySurveyFieldsMeta(
    @graphql.Args() args: CompanySurveyFieldCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanySurveyField])
  async companySurveyFields(
    @graphql.Args() args: CompanySurveyFieldFindManyArgs
  ): Promise<CompanySurveyField[]> {
    return this.service.companySurveyFields(args);
  }

  @graphql.Query(() => CompanySurveyField, { nullable: true })
  async companySurveyField(
    @graphql.Args() args: CompanySurveyFieldFindUniqueArgs
  ): Promise<CompanySurveyField | null> {
    const result = await this.service.companySurveyField(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanySurveyField)
  async createCompanySurveyField(
    @graphql.Args() args: CreateCompanySurveyFieldArgs
  ): Promise<CompanySurveyField> {
    return await this.service.createCompanySurveyField({
      ...args,
      data: {
        ...args.data,

        companySurvey: args.data.companySurvey
          ? {
              connect: args.data.companySurvey,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CompanySurveyField)
  async updateCompanySurveyField(
    @graphql.Args() args: UpdateCompanySurveyFieldArgs
  ): Promise<CompanySurveyField | null> {
    try {
      return await this.service.updateCompanySurveyField({
        ...args,
        data: {
          ...args.data,

          companySurvey: args.data.companySurvey
            ? {
                connect: args.data.companySurvey,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanySurveyField)
  async deleteCompanySurveyField(
    @graphql.Args() args: DeleteCompanySurveyFieldArgs
  ): Promise<CompanySurveyField | null> {
    try {
      return await this.service.deleteCompanySurveyField(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => CompanySurvey, {
    nullable: true,
    name: "companySurvey",
  })
  async getCompanySurvey(
    @graphql.Parent() parent: CompanySurveyField
  ): Promise<CompanySurvey | null> {
    const result = await this.service.getCompanySurvey(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
