/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserTimeTrackingRequestDetail, // @ts-ignore
  UserTimeTrackingRequest,
} from "@prisma/client";

export class UserTimeTrackingRequestDetailServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserTimeTrackingRequestDetailCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserTimeTrackingRequestDetailCountArgs>
  ): Promise<number> {
    return this.prisma.userTimeTrackingRequestDetail.count(args);
  }

  async userTimeTrackingRequestDetails<
    T extends Prisma.UserTimeTrackingRequestDetailFindManyArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.UserTimeTrackingRequestDetailFindManyArgs
    >
  ): Promise<UserTimeTrackingRequestDetail[]> {
    return this.prisma.userTimeTrackingRequestDetail.findMany(args);
  }
  async userTimeTrackingRequestDetail<
    T extends Prisma.UserTimeTrackingRequestDetailFindUniqueArgs
  >(
    args: Prisma.SelectSubset<
      T,
      Prisma.UserTimeTrackingRequestDetailFindUniqueArgs
    >
  ): Promise<UserTimeTrackingRequestDetail | null> {
    return this.prisma.userTimeTrackingRequestDetail.findUnique(args);
  }
  async createUserTimeTrackingRequestDetail<
    T extends Prisma.UserTimeTrackingRequestDetailCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.UserTimeTrackingRequestDetailCreateArgs>
  ): Promise<UserTimeTrackingRequestDetail> {
    return this.prisma.userTimeTrackingRequestDetail.create<T>(args);
  }
  async updateUserTimeTrackingRequestDetail<
    T extends Prisma.UserTimeTrackingRequestDetailUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.UserTimeTrackingRequestDetailUpdateArgs>
  ): Promise<UserTimeTrackingRequestDetail> {
    return this.prisma.userTimeTrackingRequestDetail.update<T>(args);
  }
  async deleteUserTimeTrackingRequestDetail<
    T extends Prisma.UserTimeTrackingRequestDetailDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.UserTimeTrackingRequestDetailDeleteArgs>
  ): Promise<UserTimeTrackingRequestDetail> {
    return this.prisma.userTimeTrackingRequestDetail.delete(args);
  }

  async getTimetrackingInfo(
    parentId: string
  ): Promise<UserTimeTrackingRequest | null> {
    return this.prisma.userTimeTrackingRequestDetail
      .findUnique({
        where: { id: parentId },
      })
      .timetrackingInfo();
  }
}
