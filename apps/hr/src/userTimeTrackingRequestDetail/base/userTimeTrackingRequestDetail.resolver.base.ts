/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserTimeTrackingRequestDetail } from "./UserTimeTrackingRequestDetail";
import { UserTimeTrackingRequestDetailCountArgs } from "./UserTimeTrackingRequestDetailCountArgs";
import { UserTimeTrackingRequestDetailFindManyArgs } from "./UserTimeTrackingRequestDetailFindManyArgs";
import { UserTimeTrackingRequestDetailFindUniqueArgs } from "./UserTimeTrackingRequestDetailFindUniqueArgs";
import { CreateUserTimeTrackingRequestDetailArgs } from "./CreateUserTimeTrackingRequestDetailArgs";
import { UpdateUserTimeTrackingRequestDetailArgs } from "./UpdateUserTimeTrackingRequestDetailArgs";
import { DeleteUserTimeTrackingRequestDetailArgs } from "./DeleteUserTimeTrackingRequestDetailArgs";
import { UserTimeTrackingRequest } from "../../userTimeTrackingRequest/base/UserTimeTrackingRequest";
import { UserTimeTrackingRequestDetailService } from "../userTimeTrackingRequestDetail.service";
@graphql.Resolver(() => UserTimeTrackingRequestDetail)
export class UserTimeTrackingRequestDetailResolverBase {
  constructor(
    protected readonly service: UserTimeTrackingRequestDetailService
  ) {}

  async _userTimeTrackingRequestDetailsMeta(
    @graphql.Args() args: UserTimeTrackingRequestDetailCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserTimeTrackingRequestDetail])
  async userTimeTrackingRequestDetails(
    @graphql.Args() args: UserTimeTrackingRequestDetailFindManyArgs
  ): Promise<UserTimeTrackingRequestDetail[]> {
    return this.service.userTimeTrackingRequestDetails(args);
  }

  @graphql.Query(() => UserTimeTrackingRequestDetail, { nullable: true })
  async userTimeTrackingRequestDetail(
    @graphql.Args() args: UserTimeTrackingRequestDetailFindUniqueArgs
  ): Promise<UserTimeTrackingRequestDetail | null> {
    const result = await this.service.userTimeTrackingRequestDetail(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserTimeTrackingRequestDetail)
  async createUserTimeTrackingRequestDetail(
    @graphql.Args() args: CreateUserTimeTrackingRequestDetailArgs
  ): Promise<UserTimeTrackingRequestDetail> {
    return await this.service.createUserTimeTrackingRequestDetail({
      ...args,
      data: {
        ...args.data,

        timetrackingInfo: args.data.timetrackingInfo
          ? {
              connect: args.data.timetrackingInfo,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserTimeTrackingRequestDetail)
  async updateUserTimeTrackingRequestDetail(
    @graphql.Args() args: UpdateUserTimeTrackingRequestDetailArgs
  ): Promise<UserTimeTrackingRequestDetail | null> {
    try {
      return await this.service.updateUserTimeTrackingRequestDetail({
        ...args,
        data: {
          ...args.data,

          timetrackingInfo: args.data.timetrackingInfo
            ? {
                connect: args.data.timetrackingInfo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserTimeTrackingRequestDetail)
  async deleteUserTimeTrackingRequestDetail(
    @graphql.Args() args: DeleteUserTimeTrackingRequestDetailArgs
  ): Promise<UserTimeTrackingRequestDetail | null> {
    try {
      return await this.service.deleteUserTimeTrackingRequestDetail(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserTimeTrackingRequest, {
    nullable: true,
    name: "timetrackingInfo",
  })
  async getTimetrackingInfo(
    @graphql.Parent() parent: UserTimeTrackingRequestDetail
  ): Promise<UserTimeTrackingRequest | null> {
    const result = await this.service.getTimetrackingInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
