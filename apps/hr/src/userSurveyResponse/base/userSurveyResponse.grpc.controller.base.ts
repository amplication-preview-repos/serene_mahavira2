/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { UserSurveyResponseService } from "../userSurveyResponse.service";
import { UserSurveyResponseCreateInput } from "./UserSurveyResponseCreateInput";
import { UserSurveyResponseWhereInput } from "./UserSurveyResponseWhereInput";
import { UserSurveyResponseWhereUniqueInput } from "./UserSurveyResponseWhereUniqueInput";
import { UserSurveyResponseFindManyArgs } from "./UserSurveyResponseFindManyArgs";
import { UserSurveyResponseUpdateInput } from "./UserSurveyResponseUpdateInput";
import { UserSurveyResponse } from "./UserSurveyResponse";

export class UserSurveyResponseGrpcControllerBase {
  constructor(protected readonly service: UserSurveyResponseService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserSurveyResponse })
  @GrpcMethod("UserSurveyResponseService", "createUserSurveyResponse")
  async createUserSurveyResponse(
    @common.Body() data: UserSurveyResponseCreateInput
  ): Promise<UserSurveyResponse> {
    return await this.service.createUserSurveyResponse({
      data: {
        ...data,

        companySurvey: data.companySurvey
          ? {
              connect: data.companySurvey,
            }
          : undefined,

        userInfo: data.userInfo
          ? {
              connect: data.userInfo,
            }
          : undefined,
      },
      select: {
        companySurvey: {
          select: {
            id: true,
          },
        },

        id: true,
        responseJson: true,
        submittedAt: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserSurveyResponse] })
  @ApiNestedQuery(UserSurveyResponseFindManyArgs)
  @GrpcMethod("UserSurveyResponseService", "userSurveyResponses")
  async userSurveyResponses(
    @common.Req() request: Request
  ): Promise<UserSurveyResponse[]> {
    const args = plainToClass(UserSurveyResponseFindManyArgs, request.query);
    return this.service.userSurveyResponses({
      ...args,
      select: {
        companySurvey: {
          select: {
            id: true,
          },
        },

        id: true,
        responseJson: true,
        submittedAt: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserSurveyResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserSurveyResponseService", "userSurveyResponse")
  async userSurveyResponse(
    @common.Param() params: UserSurveyResponseWhereUniqueInput
  ): Promise<UserSurveyResponse | null> {
    const result = await this.service.userSurveyResponse({
      where: params,
      select: {
        companySurvey: {
          select: {
            id: true,
          },
        },

        id: true,
        responseJson: true,
        submittedAt: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserSurveyResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserSurveyResponseService", "updateUserSurveyResponse")
  async updateUserSurveyResponse(
    @common.Param() params: UserSurveyResponseWhereUniqueInput,
    @common.Body() data: UserSurveyResponseUpdateInput
  ): Promise<UserSurveyResponse | null> {
    try {
      return await this.service.updateUserSurveyResponse({
        where: params,
        data: {
          ...data,

          companySurvey: data.companySurvey
            ? {
                connect: data.companySurvey,
              }
            : undefined,

          userInfo: data.userInfo
            ? {
                connect: data.userInfo,
              }
            : undefined,
        },
        select: {
          companySurvey: {
            select: {
              id: true,
            },
          },

          id: true,
          responseJson: true,
          submittedAt: true,

          userInfo: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserSurveyResponse })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserSurveyResponseService", "deleteUserSurveyResponse")
  async deleteUserSurveyResponse(
    @common.Param() params: UserSurveyResponseWhereUniqueInput
  ): Promise<UserSurveyResponse | null> {
    try {
      return await this.service.deleteUserSurveyResponse({
        where: params,
        select: {
          companySurvey: {
            select: {
              id: true,
            },
          },

          id: true,
          responseJson: true,
          submittedAt: true,

          userInfo: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
