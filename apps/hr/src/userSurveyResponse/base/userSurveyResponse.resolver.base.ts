/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserSurveyResponse } from "./UserSurveyResponse";
import { UserSurveyResponseCountArgs } from "./UserSurveyResponseCountArgs";
import { UserSurveyResponseFindManyArgs } from "./UserSurveyResponseFindManyArgs";
import { UserSurveyResponseFindUniqueArgs } from "./UserSurveyResponseFindUniqueArgs";
import { CreateUserSurveyResponseArgs } from "./CreateUserSurveyResponseArgs";
import { UpdateUserSurveyResponseArgs } from "./UpdateUserSurveyResponseArgs";
import { DeleteUserSurveyResponseArgs } from "./DeleteUserSurveyResponseArgs";
import { CompanySurvey } from "../../companySurvey/base/CompanySurvey";
import { UserInfo } from "../../userInfo/base/UserInfo";
import { UserSurveyResponseService } from "../userSurveyResponse.service";
@graphql.Resolver(() => UserSurveyResponse)
export class UserSurveyResponseResolverBase {
  constructor(protected readonly service: UserSurveyResponseService) {}

  async _userSurveyResponsesMeta(
    @graphql.Args() args: UserSurveyResponseCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserSurveyResponse])
  async userSurveyResponses(
    @graphql.Args() args: UserSurveyResponseFindManyArgs
  ): Promise<UserSurveyResponse[]> {
    return this.service.userSurveyResponses(args);
  }

  @graphql.Query(() => UserSurveyResponse, { nullable: true })
  async userSurveyResponse(
    @graphql.Args() args: UserSurveyResponseFindUniqueArgs
  ): Promise<UserSurveyResponse | null> {
    const result = await this.service.userSurveyResponse(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserSurveyResponse)
  async createUserSurveyResponse(
    @graphql.Args() args: CreateUserSurveyResponseArgs
  ): Promise<UserSurveyResponse> {
    return await this.service.createUserSurveyResponse({
      ...args,
      data: {
        ...args.data,

        companySurvey: args.data.companySurvey
          ? {
              connect: args.data.companySurvey,
            }
          : undefined,

        userInfo: args.data.userInfo
          ? {
              connect: args.data.userInfo,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserSurveyResponse)
  async updateUserSurveyResponse(
    @graphql.Args() args: UpdateUserSurveyResponseArgs
  ): Promise<UserSurveyResponse | null> {
    try {
      return await this.service.updateUserSurveyResponse({
        ...args,
        data: {
          ...args.data,

          companySurvey: args.data.companySurvey
            ? {
                connect: args.data.companySurvey,
              }
            : undefined,

          userInfo: args.data.userInfo
            ? {
                connect: args.data.userInfo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserSurveyResponse)
  async deleteUserSurveyResponse(
    @graphql.Args() args: DeleteUserSurveyResponseArgs
  ): Promise<UserSurveyResponse | null> {
    try {
      return await this.service.deleteUserSurveyResponse(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => CompanySurvey, {
    nullable: true,
    name: "companySurvey",
  })
  async getCompanySurvey(
    @graphql.Parent() parent: UserSurveyResponse
  ): Promise<CompanySurvey | null> {
    const result = await this.service.getCompanySurvey(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserInfo, {
    nullable: true,
    name: "userInfo",
  })
  async getUserInfo(
    @graphql.Parent() parent: UserSurveyResponse
  ): Promise<UserInfo | null> {
    const result = await this.service.getUserInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
