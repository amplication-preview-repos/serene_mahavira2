/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { UserInfoService } from "../userInfo.service";
import { UserInfoCreateInput } from "./UserInfoCreateInput";
import { UserInfoWhereInput } from "./UserInfoWhereInput";
import { UserInfoWhereUniqueInput } from "./UserInfoWhereUniqueInput";
import { UserInfoFindManyArgs } from "./UserInfoFindManyArgs";
import { UserInfoUpdateInput } from "./UserInfoUpdateInput";
import { UserInfo } from "./UserInfo";
import { UserExpenseRequestFindManyArgs } from "../../userExpenseRequest/base/UserExpenseRequestFindManyArgs";
import { UserExpenseRequest } from "../../userExpenseRequest/base/UserExpenseRequest";
import { UserExpenseRequestWhereUniqueInput } from "../../userExpenseRequest/base/UserExpenseRequestWhereUniqueInput";
import { UserTimeOffRequestFindManyArgs } from "../../userTimeOffRequest/base/UserTimeOffRequestFindManyArgs";
import { UserTimeOffRequest } from "../../userTimeOffRequest/base/UserTimeOffRequest";
import { UserTimeOffRequestWhereUniqueInput } from "../../userTimeOffRequest/base/UserTimeOffRequestWhereUniqueInput";
import { UserTimeTrackingRequestFindManyArgs } from "../../userTimeTrackingRequest/base/UserTimeTrackingRequestFindManyArgs";
import { UserTimeTrackingRequest } from "../../userTimeTrackingRequest/base/UserTimeTrackingRequest";
import { UserTimeTrackingRequestWhereUniqueInput } from "../../userTimeTrackingRequest/base/UserTimeTrackingRequestWhereUniqueInput";
import { CompanyCalendarFindManyArgs } from "../../companyCalendar/base/CompanyCalendarFindManyArgs";
import { CompanyCalendar } from "../../companyCalendar/base/CompanyCalendar";
import { CompanyCalendarWhereUniqueInput } from "../../companyCalendar/base/CompanyCalendarWhereUniqueInput";
import { CompanyNewFindManyArgs } from "../../companyNew/base/CompanyNewFindManyArgs";
import { CompanyNew } from "../../companyNew/base/CompanyNew";
import { CompanyNewWhereUniqueInput } from "../../companyNew/base/CompanyNewWhereUniqueInput";
import { CompanyRecognitionFindManyArgs } from "../../companyRecognition/base/CompanyRecognitionFindManyArgs";
import { CompanyRecognition } from "../../companyRecognition/base/CompanyRecognition";
import { CompanyRecognitionWhereUniqueInput } from "../../companyRecognition/base/CompanyRecognitionWhereUniqueInput";
import { UserAssetFindManyArgs } from "../../userAsset/base/UserAssetFindManyArgs";
import { UserAsset } from "../../userAsset/base/UserAsset";
import { UserAssetWhereUniqueInput } from "../../userAsset/base/UserAssetWhereUniqueInput";
import { UserSurveyResponseFindManyArgs } from "../../userSurveyResponse/base/UserSurveyResponseFindManyArgs";
import { UserSurveyResponse } from "../../userSurveyResponse/base/UserSurveyResponse";
import { UserSurveyResponseWhereUniqueInput } from "../../userSurveyResponse/base/UserSurveyResponseWhereUniqueInput";

export class UserInfoGrpcControllerBase {
  constructor(protected readonly service: UserInfoService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserInfo })
  @GrpcMethod("UserInfoService", "createUserInfo")
  async createUserInfo(
    @common.Body() data: UserInfoCreateInput
  ): Promise<UserInfo> {
    return await this.service.createUserInfo({
      data: data,
      select: {
        address: true,
        businessEmail: true,
        citizenship: true,
        city: true,
        country: true,
        documents: true,
        educations: true,
        emergencyContacts: true,
        employeeNumber: true,
        firstName: true,
        gender: true,
        id: true,
        jobs: true,
        lastName: true,
        managerId: true,
        martialStatus: true,
        nationality: true,
        personalEmail: true,
        phone: true,
        postcode: true,
        socialContacts: true,
        timeoffs: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserInfo] })
  @ApiNestedQuery(UserInfoFindManyArgs)
  @GrpcMethod("UserInfoService", "userInfos")
  async userInfos(@common.Req() request: Request): Promise<UserInfo[]> {
    const args = plainToClass(UserInfoFindManyArgs, request.query);
    return this.service.userInfos({
      ...args,
      select: {
        address: true,
        businessEmail: true,
        citizenship: true,
        city: true,
        country: true,
        documents: true,
        educations: true,
        emergencyContacts: true,
        employeeNumber: true,
        firstName: true,
        gender: true,
        id: true,
        jobs: true,
        lastName: true,
        managerId: true,
        martialStatus: true,
        nationality: true,
        personalEmail: true,
        phone: true,
        postcode: true,
        socialContacts: true,
        timeoffs: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserInfoService", "userInfo")
  async userInfo(
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<UserInfo | null> {
    const result = await this.service.userInfo({
      where: params,
      select: {
        address: true,
        businessEmail: true,
        citizenship: true,
        city: true,
        country: true,
        documents: true,
        educations: true,
        emergencyContacts: true,
        employeeNumber: true,
        firstName: true,
        gender: true,
        id: true,
        jobs: true,
        lastName: true,
        managerId: true,
        martialStatus: true,
        nationality: true,
        personalEmail: true,
        phone: true,
        postcode: true,
        socialContacts: true,
        timeoffs: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserInfoService", "updateUserInfo")
  async updateUserInfo(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() data: UserInfoUpdateInput
  ): Promise<UserInfo | null> {
    try {
      return await this.service.updateUserInfo({
        where: params,
        data: data,
        select: {
          address: true,
          businessEmail: true,
          citizenship: true,
          city: true,
          country: true,
          documents: true,
          educations: true,
          emergencyContacts: true,
          employeeNumber: true,
          firstName: true,
          gender: true,
          id: true,
          jobs: true,
          lastName: true,
          managerId: true,
          martialStatus: true,
          nationality: true,
          personalEmail: true,
          phone: true,
          postcode: true,
          socialContacts: true,
          timeoffs: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserInfo })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("UserInfoService", "deleteUserInfo")
  async deleteUserInfo(
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<UserInfo | null> {
    try {
      return await this.service.deleteUserInfo({
        where: params,
        select: {
          address: true,
          businessEmail: true,
          citizenship: true,
          city: true,
          country: true,
          documents: true,
          educations: true,
          emergencyContacts: true,
          employeeNumber: true,
          firstName: true,
          gender: true,
          id: true,
          jobs: true,
          lastName: true,
          managerId: true,
          martialStatus: true,
          nationality: true,
          personalEmail: true,
          phone: true,
          postcode: true,
          socialContacts: true,
          timeoffs: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/approverExpenseRequest")
  @ApiNestedQuery(UserExpenseRequestFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyApproverExpenseRequest")
  async findManyApproverExpenseRequest(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<UserExpenseRequest[]> {
    const query = plainToClass(UserExpenseRequestFindManyArgs, request.query);
    const results = await this.service.findApproverExpenseRequest(params.id, {
      ...query,
      select: {
        approvedAt: true,

        approverInfo: {
          select: {
            id: true,
          },
        },

        attachments: true,
        category: true,
        id: true,
        note: true,
        purchaseDate: true,
        requestedAt: true,

        requesterInfo: {
          select: {
            id: true,
          },
        },

        status: true,
        taxAmount: true,
        title: true,
        totalAmount: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/approverExpenseRequest")
  @GrpcMethod("UserInfoService", "connectApproverExpenseRequest")
  async connectApproverExpenseRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserExpenseRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approverExpenseRequest: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/approverExpenseRequest")
  @GrpcMethod("UserInfoService", "updateApproverExpenseRequest")
  async updateApproverExpenseRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserExpenseRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approverExpenseRequest: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/approverExpenseRequest")
  @GrpcMethod("UserInfoService", "disconnectApproverExpenseRequest")
  async disconnectApproverExpenseRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserExpenseRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approverExpenseRequest: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/approverTimeoffRequest")
  @ApiNestedQuery(UserTimeOffRequestFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyApproverTimeoffRequest")
  async findManyApproverTimeoffRequest(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<UserTimeOffRequest[]> {
    const query = plainToClass(UserTimeOffRequestFindManyArgs, request.query);
    const results = await this.service.findApproverTimeoffRequest(params.id, {
      ...query,
      select: {
        approverInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        note: true,
        numDays: true,
        periodEnd: true,
        periodStart: true,
        status: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/approverTimeoffRequest")
  @GrpcMethod("UserInfoService", "connectApproverTimeoffRequest")
  async connectApproverTimeoffRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approverTimeoffRequest: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/approverTimeoffRequest")
  @GrpcMethod("UserInfoService", "updateApproverTimeoffRequest")
  async updateApproverTimeoffRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approverTimeoffRequest: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/approverTimeoffRequest")
  @GrpcMethod("UserInfoService", "disconnectApproverTimeoffRequest")
  async disconnectApproverTimeoffRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approverTimeoffRequest: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/approverTimetrackingRequest")
  @ApiNestedQuery(UserTimeTrackingRequestFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyApproverTimetrackingRequest")
  async findManyApproverTimetrackingRequest(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<UserTimeTrackingRequest[]> {
    const query = plainToClass(
      UserTimeTrackingRequestFindManyArgs,
      request.query
    );
    const results = await this.service.findApproverTimetrackingRequest(
      params.id,
      {
        ...query,
        select: {
          approvedAt: true,

          approverInfo: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          requestedAt: true,

          requesterInfo: {
            select: {
              id: true,
            },
          },

          status: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/approverTimetrackingRequest")
  @GrpcMethod("UserInfoService", "connectApproverTimetrackingRequest")
  async connectApproverTimetrackingRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeTrackingRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approverTimetrackingRequest: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/approverTimetrackingRequest")
  @GrpcMethod("UserInfoService", "updateApproverTimetrackingRequest")
  async updateApproverTimetrackingRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeTrackingRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approverTimetrackingRequest: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/approverTimetrackingRequest")
  @GrpcMethod("UserInfoService", "disconnectApproverTimetrackingRequest")
  async disconnectApproverTimetrackingRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeTrackingRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      approverTimetrackingRequest: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/companyCalendar")
  @ApiNestedQuery(CompanyCalendarFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyCompanyCalendar")
  async findManyCompanyCalendar(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<CompanyCalendar[]> {
    const query = plainToClass(CompanyCalendarFindManyArgs, request.query);
    const results = await this.service.findCompanyCalendar(params.id, {
      ...query,
      select: {
        calendarType: true,
        configNotify: true,
        duration: true,
        endDate: true,
        id: true,
        location: true,
        members: true,
        name: true,
        note: true,
        startDate: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/companyCalendar")
  @GrpcMethod("UserInfoService", "connectCompanyCalendar")
  async connectCompanyCalendar(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyCalendarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyCalendar: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/companyCalendar")
  @GrpcMethod("UserInfoService", "updateCompanyCalendar")
  async updateCompanyCalendar(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyCalendarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyCalendar: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/companyCalendar")
  @GrpcMethod("UserInfoService", "disconnectCompanyCalendar")
  async disconnectCompanyCalendar(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyCalendarWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyCalendar: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/companyNews")
  @ApiNestedQuery(CompanyNewFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyCompanyNews")
  async findManyCompanyNews(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<CompanyNew[]> {
    const query = plainToClass(CompanyNewFindManyArgs, request.query);
    const results = await this.service.findCompanyNews(params.id, {
      ...query,
      select: {
        content: true,
        id: true,
        imagePath: true,
        publishedDate: true,
        status: true,
        tags: true,
        title: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/companyNews")
  @GrpcMethod("UserInfoService", "connectCompanyNews")
  async connectCompanyNews(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyNewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyNews: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/companyNews")
  @GrpcMethod("UserInfoService", "updateCompanyNews")
  async updateCompanyNews(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyNewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyNews: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/companyNews")
  @GrpcMethod("UserInfoService", "disconnectCompanyNews")
  async disconnectCompanyNews(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyNewWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      companyNews: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requesterExpenseRequest")
  @ApiNestedQuery(UserExpenseRequestFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyRequesterExpenseRequest")
  async findManyRequesterExpenseRequest(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<UserExpenseRequest[]> {
    const query = plainToClass(UserExpenseRequestFindManyArgs, request.query);
    const results = await this.service.findRequesterExpenseRequest(params.id, {
      ...query,
      select: {
        approvedAt: true,

        approverInfo: {
          select: {
            id: true,
          },
        },

        attachments: true,
        category: true,
        id: true,
        note: true,
        purchaseDate: true,
        requestedAt: true,

        requesterInfo: {
          select: {
            id: true,
          },
        },

        status: true,
        taxAmount: true,
        title: true,
        totalAmount: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requesterExpenseRequest")
  @GrpcMethod("UserInfoService", "connectRequesterExpenseRequest")
  async connectRequesterExpenseRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserExpenseRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requesterExpenseRequest: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requesterExpenseRequest")
  @GrpcMethod("UserInfoService", "updateRequesterExpenseRequest")
  async updateRequesterExpenseRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserExpenseRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requesterExpenseRequest: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requesterExpenseRequest")
  @GrpcMethod("UserInfoService", "disconnectRequesterExpenseRequest")
  async disconnectRequesterExpenseRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserExpenseRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requesterExpenseRequest: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requesterInfo")
  @ApiNestedQuery(CompanyRecognitionFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyRequesterInfo")
  async findManyRequesterInfo(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<CompanyRecognition[]> {
    const query = plainToClass(CompanyRecognitionFindManyArgs, request.query);
    const results = await this.service.findRequesterInfo(params.id, {
      ...query,
      select: {
        description: true,
        id: true,

        requesterInfo: {
          select: {
            id: true,
          },
        },

        title: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requesterInfo")
  @GrpcMethod("UserInfoService", "connectRequesterInfo")
  async connectRequesterInfo(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyRecognitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requesterInfo: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requesterInfo")
  @GrpcMethod("UserInfoService", "updateRequesterInfo")
  async updateRequesterInfo(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyRecognitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requesterInfo: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requesterInfo")
  @GrpcMethod("UserInfoService", "disconnectRequesterInfo")
  async disconnectRequesterInfo(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyRecognitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requesterInfo: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/requesterTimetrackingRequest")
  @ApiNestedQuery(UserTimeTrackingRequestFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyRequesterTimetrackingRequest")
  async findManyRequesterTimetrackingRequest(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<UserTimeTrackingRequest[]> {
    const query = plainToClass(
      UserTimeTrackingRequestFindManyArgs,
      request.query
    );
    const results = await this.service.findRequesterTimetrackingRequest(
      params.id,
      {
        ...query,
        select: {
          approvedAt: true,

          approverInfo: {
            select: {
              id: true,
            },
          },

          id: true,
          name: true,
          requestedAt: true,

          requesterInfo: {
            select: {
              id: true,
            },
          },

          status: true,
        },
      }
    );
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/requesterTimetrackingRequest")
  @GrpcMethod("UserInfoService", "connectRequesterTimetrackingRequest")
  async connectRequesterTimetrackingRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeTrackingRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requesterTimetrackingRequest: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/requesterTimetrackingRequest")
  @GrpcMethod("UserInfoService", "updateRequesterTimetrackingRequest")
  async updateRequesterTimetrackingRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeTrackingRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requesterTimetrackingRequest: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/requesterTimetrackingRequest")
  @GrpcMethod("UserInfoService", "disconnectRequesterTimetrackingRequest")
  async disconnectRequesterTimetrackingRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeTrackingRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      requesterTimetrackingRequest: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userAsset")
  @ApiNestedQuery(UserAssetFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyUserAsset")
  async findManyUserAsset(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<UserAsset[]> {
    const query = plainToClass(UserAssetFindManyArgs, request.query);
    const results = await this.service.findUserAsset(params.id, {
      ...query,
      select: {
        assetId: true,
        id: true,
        status: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userAsset")
  @GrpcMethod("UserInfoService", "connectUserAsset")
  async connectUserAsset(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserAssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAsset: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userAsset")
  @GrpcMethod("UserInfoService", "updateUserAsset")
  async updateUserAsset(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserAssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAsset: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userAsset")
  @GrpcMethod("UserInfoService", "disconnectUserAsset")
  async disconnectUserAsset(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserAssetWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userAsset: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userInfo")
  @ApiNestedQuery(CompanyRecognitionFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyUserInfo")
  async findManyUserInfo(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<CompanyRecognition[]> {
    const query = plainToClass(CompanyRecognitionFindManyArgs, request.query);
    const results = await this.service.findUserInfo(params.id, {
      ...query,
      select: {
        description: true,
        id: true,

        requesterInfo: {
          select: {
            id: true,
          },
        },

        title: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userInfo")
  @GrpcMethod("UserInfoService", "connectUserInfo")
  async connectUserInfo(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyRecognitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userInfo: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userInfo")
  @GrpcMethod("UserInfoService", "updateUserInfo")
  async updateUserInfo(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyRecognitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userInfo: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userInfo")
  @GrpcMethod("UserInfoService", "disconnectUserInfo")
  async disconnectUserInfo(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: CompanyRecognitionWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userInfo: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userSurveyResponse")
  @ApiNestedQuery(UserSurveyResponseFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyUserSurveyResponse")
  async findManyUserSurveyResponse(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<UserSurveyResponse[]> {
    const query = plainToClass(UserSurveyResponseFindManyArgs, request.query);
    const results = await this.service.findUserSurveyResponse(params.id, {
      ...query,
      select: {
        companySurvey: {
          select: {
            id: true,
          },
        },

        id: true,
        responseJson: true,
        submittedAt: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userSurveyResponse")
  @GrpcMethod("UserInfoService", "connectUserSurveyResponse")
  async connectUserSurveyResponse(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserSurveyResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSurveyResponse: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userSurveyResponse")
  @GrpcMethod("UserInfoService", "updateUserSurveyResponse")
  async updateUserSurveyResponse(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserSurveyResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSurveyResponse: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userSurveyResponse")
  @GrpcMethod("UserInfoService", "disconnectUserSurveyResponse")
  async disconnectUserSurveyResponse(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserSurveyResponseWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userSurveyResponse: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Get("/:id/userTimeoffRequest")
  @ApiNestedQuery(UserTimeOffRequestFindManyArgs)
  @GrpcMethod("UserInfoService", "findManyUserTimeoffRequest")
  async findManyUserTimeoffRequest(
    @common.Req() request: Request,
    @common.Param() params: UserInfoWhereUniqueInput
  ): Promise<UserTimeOffRequest[]> {
    const query = plainToClass(UserTimeOffRequestFindManyArgs, request.query);
    const results = await this.service.findUserTimeoffRequest(params.id, {
      ...query,
      select: {
        approverInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        note: true,
        numDays: true,
        periodEnd: true,
        periodStart: true,
        status: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/userTimeoffRequest")
  @GrpcMethod("UserInfoService", "connectUserTimeoffRequest")
  async connectUserTimeoffRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userTimeoffRequest: {
        connect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/userTimeoffRequest")
  @GrpcMethod("UserInfoService", "updateUserTimeoffRequest")
  async updateUserTimeoffRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userTimeoffRequest: {
        set: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/userTimeoffRequest")
  @GrpcMethod("UserInfoService", "disconnectUserTimeoffRequest")
  async disconnectUserTimeoffRequest(
    @common.Param() params: UserInfoWhereUniqueInput,
    @common.Body() body: UserTimeOffRequestWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      userTimeoffRequest: {
        disconnect: body,
      },
    };
    await this.service.updateUserInfo({
      where: params,
      data,
      select: { id: true },
    });
  }
}
