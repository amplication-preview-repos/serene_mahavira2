/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserInfo, // @ts-ignore
  UserExpenseRequest, // @ts-ignore
  UserTimeOffRequest, // @ts-ignore
  UserTimeTrackingRequest, // @ts-ignore
  CompanyCalendar, // @ts-ignore
  CompanyNew, // @ts-ignore
  CompanyRecognition, // @ts-ignore
  UserAsset, // @ts-ignore
  UserSurveyResponse,
} from "@prisma/client";

export class UserInfoServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserInfoCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserInfoCountArgs>
  ): Promise<number> {
    return this.prisma.userInfo.count(args);
  }

  async userInfos<T extends Prisma.UserInfoFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserInfoFindManyArgs>
  ): Promise<UserInfo[]> {
    return this.prisma.userInfo.findMany(args);
  }
  async userInfo<T extends Prisma.UserInfoFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserInfoFindUniqueArgs>
  ): Promise<UserInfo | null> {
    return this.prisma.userInfo.findUnique(args);
  }
  async createUserInfo<T extends Prisma.UserInfoCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserInfoCreateArgs>
  ): Promise<UserInfo> {
    return this.prisma.userInfo.create<T>(args);
  }
  async updateUserInfo<T extends Prisma.UserInfoUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserInfoUpdateArgs>
  ): Promise<UserInfo> {
    return this.prisma.userInfo.update<T>(args);
  }
  async deleteUserInfo<T extends Prisma.UserInfoDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserInfoDeleteArgs>
  ): Promise<UserInfo> {
    return this.prisma.userInfo.delete(args);
  }

  async findApproverExpenseRequest(
    parentId: string,
    args: Prisma.UserExpenseRequestFindManyArgs
  ): Promise<UserExpenseRequest[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .approverExpenseRequest(args);
  }

  async findApproverTimeoffRequest(
    parentId: string,
    args: Prisma.UserTimeOffRequestFindManyArgs
  ): Promise<UserTimeOffRequest[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .approverTimeoffRequest(args);
  }

  async findApproverTimetrackingRequest(
    parentId: string,
    args: Prisma.UserTimeTrackingRequestFindManyArgs
  ): Promise<UserTimeTrackingRequest[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .approverTimetrackingRequest(args);
  }

  async findCompanyCalendar(
    parentId: string,
    args: Prisma.CompanyCalendarFindManyArgs
  ): Promise<CompanyCalendar[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .companyCalendar(args);
  }

  async findCompanyNews(
    parentId: string,
    args: Prisma.CompanyNewFindManyArgs
  ): Promise<CompanyNew[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .companyNews(args);
  }

  async findRequesterExpenseRequest(
    parentId: string,
    args: Prisma.UserExpenseRequestFindManyArgs
  ): Promise<UserExpenseRequest[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requesterExpenseRequest(args);
  }

  async findRequesterInfo(
    parentId: string,
    args: Prisma.CompanyRecognitionFindManyArgs
  ): Promise<CompanyRecognition[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requesterInfo(args);
  }

  async findRequesterTimetrackingRequest(
    parentId: string,
    args: Prisma.UserTimeTrackingRequestFindManyArgs
  ): Promise<UserTimeTrackingRequest[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .requesterTimetrackingRequest(args);
  }

  async findUserAsset(
    parentId: string,
    args: Prisma.UserAssetFindManyArgs
  ): Promise<UserAsset[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userAsset(args);
  }

  async findUserInfo(
    parentId: string,
    args: Prisma.CompanyRecognitionFindManyArgs
  ): Promise<CompanyRecognition[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userInfo(args);
  }

  async findUserSurveyResponse(
    parentId: string,
    args: Prisma.UserSurveyResponseFindManyArgs
  ): Promise<UserSurveyResponse[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userSurveyResponse(args);
  }

  async findUserTimeoffRequest(
    parentId: string,
    args: Prisma.UserTimeOffRequestFindManyArgs
  ): Promise<UserTimeOffRequest[]> {
    return this.prisma.userInfo
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .userTimeoffRequest(args);
  }
}
