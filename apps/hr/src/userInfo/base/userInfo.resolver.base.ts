/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserInfo } from "./UserInfo";
import { UserInfoCountArgs } from "./UserInfoCountArgs";
import { UserInfoFindManyArgs } from "./UserInfoFindManyArgs";
import { UserInfoFindUniqueArgs } from "./UserInfoFindUniqueArgs";
import { CreateUserInfoArgs } from "./CreateUserInfoArgs";
import { UpdateUserInfoArgs } from "./UpdateUserInfoArgs";
import { DeleteUserInfoArgs } from "./DeleteUserInfoArgs";
import { UserExpenseRequestFindManyArgs } from "../../userExpenseRequest/base/UserExpenseRequestFindManyArgs";
import { UserExpenseRequest } from "../../userExpenseRequest/base/UserExpenseRequest";
import { UserTimeOffRequestFindManyArgs } from "../../userTimeOffRequest/base/UserTimeOffRequestFindManyArgs";
import { UserTimeOffRequest } from "../../userTimeOffRequest/base/UserTimeOffRequest";
import { UserTimeTrackingRequestFindManyArgs } from "../../userTimeTrackingRequest/base/UserTimeTrackingRequestFindManyArgs";
import { UserTimeTrackingRequest } from "../../userTimeTrackingRequest/base/UserTimeTrackingRequest";
import { CompanyCalendarFindManyArgs } from "../../companyCalendar/base/CompanyCalendarFindManyArgs";
import { CompanyCalendar } from "../../companyCalendar/base/CompanyCalendar";
import { CompanyNewFindManyArgs } from "../../companyNew/base/CompanyNewFindManyArgs";
import { CompanyNew } from "../../companyNew/base/CompanyNew";
import { CompanyRecognitionFindManyArgs } from "../../companyRecognition/base/CompanyRecognitionFindManyArgs";
import { CompanyRecognition } from "../../companyRecognition/base/CompanyRecognition";
import { UserAssetFindManyArgs } from "../../userAsset/base/UserAssetFindManyArgs";
import { UserAsset } from "../../userAsset/base/UserAsset";
import { UserSurveyResponseFindManyArgs } from "../../userSurveyResponse/base/UserSurveyResponseFindManyArgs";
import { UserSurveyResponse } from "../../userSurveyResponse/base/UserSurveyResponse";
import { UserInfoService } from "../userInfo.service";
@graphql.Resolver(() => UserInfo)
export class UserInfoResolverBase {
  constructor(protected readonly service: UserInfoService) {}

  async _userInfosMeta(
    @graphql.Args() args: UserInfoCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserInfo])
  async userInfos(
    @graphql.Args() args: UserInfoFindManyArgs
  ): Promise<UserInfo[]> {
    return this.service.userInfos(args);
  }

  @graphql.Query(() => UserInfo, { nullable: true })
  async userInfo(
    @graphql.Args() args: UserInfoFindUniqueArgs
  ): Promise<UserInfo | null> {
    const result = await this.service.userInfo(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserInfo)
  async createUserInfo(
    @graphql.Args() args: CreateUserInfoArgs
  ): Promise<UserInfo> {
    return await this.service.createUserInfo({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => UserInfo)
  async updateUserInfo(
    @graphql.Args() args: UpdateUserInfoArgs
  ): Promise<UserInfo | null> {
    try {
      return await this.service.updateUserInfo({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserInfo)
  async deleteUserInfo(
    @graphql.Args() args: DeleteUserInfoArgs
  ): Promise<UserInfo | null> {
    try {
      return await this.service.deleteUserInfo(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [UserExpenseRequest], {
    name: "approverExpenseRequest",
  })
  async findApproverExpenseRequest(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: UserExpenseRequestFindManyArgs
  ): Promise<UserExpenseRequest[]> {
    const results = await this.service.findApproverExpenseRequest(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserTimeOffRequest], {
    name: "approverTimeoffRequest",
  })
  async findApproverTimeoffRequest(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: UserTimeOffRequestFindManyArgs
  ): Promise<UserTimeOffRequest[]> {
    const results = await this.service.findApproverTimeoffRequest(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserTimeTrackingRequest], {
    name: "approverTimetrackingRequest",
  })
  async findApproverTimetrackingRequest(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: UserTimeTrackingRequestFindManyArgs
  ): Promise<UserTimeTrackingRequest[]> {
    const results = await this.service.findApproverTimetrackingRequest(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CompanyCalendar], { name: "companyCalendar" })
  async findCompanyCalendar(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: CompanyCalendarFindManyArgs
  ): Promise<CompanyCalendar[]> {
    const results = await this.service.findCompanyCalendar(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CompanyNew], { name: "companyNews" })
  async findCompanyNews(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: CompanyNewFindManyArgs
  ): Promise<CompanyNew[]> {
    const results = await this.service.findCompanyNews(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserExpenseRequest], {
    name: "requesterExpenseRequest",
  })
  async findRequesterExpenseRequest(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: UserExpenseRequestFindManyArgs
  ): Promise<UserExpenseRequest[]> {
    const results = await this.service.findRequesterExpenseRequest(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CompanyRecognition], { name: "requesterInfo" })
  async findRequesterInfo(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: CompanyRecognitionFindManyArgs
  ): Promise<CompanyRecognition[]> {
    const results = await this.service.findRequesterInfo(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserTimeTrackingRequest], {
    name: "requesterTimetrackingRequest",
  })
  async findRequesterTimetrackingRequest(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: UserTimeTrackingRequestFindManyArgs
  ): Promise<UserTimeTrackingRequest[]> {
    const results = await this.service.findRequesterTimetrackingRequest(
      parent.id,
      args
    );

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserAsset], { name: "userAsset" })
  async findUserAsset(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: UserAssetFindManyArgs
  ): Promise<UserAsset[]> {
    const results = await this.service.findUserAsset(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [CompanyRecognition], { name: "userInfo" })
  async findUserInfo(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: CompanyRecognitionFindManyArgs
  ): Promise<CompanyRecognition[]> {
    const results = await this.service.findUserInfo(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserSurveyResponse], {
    name: "userSurveyResponse",
  })
  async findUserSurveyResponse(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: UserSurveyResponseFindManyArgs
  ): Promise<UserSurveyResponse[]> {
    const results = await this.service.findUserSurveyResponse(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => [UserTimeOffRequest], {
    name: "userTimeoffRequest",
  })
  async findUserTimeoffRequest(
    @graphql.Parent() parent: UserInfo,
    @graphql.Args() args: UserTimeOffRequestFindManyArgs
  ): Promise<UserTimeOffRequest[]> {
    const results = await this.service.findUserTimeoffRequest(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
