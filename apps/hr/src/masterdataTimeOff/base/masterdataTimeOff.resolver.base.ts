/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MasterdataTimeOff } from "./MasterdataTimeOff";
import { MasterdataTimeOffCountArgs } from "./MasterdataTimeOffCountArgs";
import { MasterdataTimeOffFindManyArgs } from "./MasterdataTimeOffFindManyArgs";
import { MasterdataTimeOffFindUniqueArgs } from "./MasterdataTimeOffFindUniqueArgs";
import { CreateMasterdataTimeOffArgs } from "./CreateMasterdataTimeOffArgs";
import { UpdateMasterdataTimeOffArgs } from "./UpdateMasterdataTimeOffArgs";
import { DeleteMasterdataTimeOffArgs } from "./DeleteMasterdataTimeOffArgs";
import { MasterdataTimeOffService } from "../masterdataTimeOff.service";
@graphql.Resolver(() => MasterdataTimeOff)
export class MasterdataTimeOffResolverBase {
  constructor(protected readonly service: MasterdataTimeOffService) {}

  async _masterdataTimeOffsMeta(
    @graphql.Args() args: MasterdataTimeOffCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MasterdataTimeOff])
  async masterdataTimeOffs(
    @graphql.Args() args: MasterdataTimeOffFindManyArgs
  ): Promise<MasterdataTimeOff[]> {
    return this.service.masterdataTimeOffs(args);
  }

  @graphql.Query(() => MasterdataTimeOff, { nullable: true })
  async masterdataTimeOff(
    @graphql.Args() args: MasterdataTimeOffFindUniqueArgs
  ): Promise<MasterdataTimeOff | null> {
    const result = await this.service.masterdataTimeOff(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MasterdataTimeOff)
  async createMasterdataTimeOff(
    @graphql.Args() args: CreateMasterdataTimeOffArgs
  ): Promise<MasterdataTimeOff> {
    return await this.service.createMasterdataTimeOff({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MasterdataTimeOff)
  async updateMasterdataTimeOff(
    @graphql.Args() args: UpdateMasterdataTimeOffArgs
  ): Promise<MasterdataTimeOff | null> {
    try {
      return await this.service.updateMasterdataTimeOff({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MasterdataTimeOff)
  async deleteMasterdataTimeOff(
    @graphql.Args() args: DeleteMasterdataTimeOffArgs
  ): Promise<MasterdataTimeOff | null> {
    try {
      return await this.service.deleteMasterdataTimeOff(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
