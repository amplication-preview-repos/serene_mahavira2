/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserAsset } from "./UserAsset";
import { UserAssetCountArgs } from "./UserAssetCountArgs";
import { UserAssetFindManyArgs } from "./UserAssetFindManyArgs";
import { UserAssetFindUniqueArgs } from "./UserAssetFindUniqueArgs";
import { CreateUserAssetArgs } from "./CreateUserAssetArgs";
import { UpdateUserAssetArgs } from "./UpdateUserAssetArgs";
import { DeleteUserAssetArgs } from "./DeleteUserAssetArgs";
import { UserInfo } from "../../userInfo/base/UserInfo";
import { UserAssetService } from "../userAsset.service";
@graphql.Resolver(() => UserAsset)
export class UserAssetResolverBase {
  constructor(protected readonly service: UserAssetService) {}

  async _userAssetsMeta(
    @graphql.Args() args: UserAssetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserAsset])
  async userAssets(
    @graphql.Args() args: UserAssetFindManyArgs
  ): Promise<UserAsset[]> {
    return this.service.userAssets(args);
  }

  @graphql.Query(() => UserAsset, { nullable: true })
  async userAsset(
    @graphql.Args() args: UserAssetFindUniqueArgs
  ): Promise<UserAsset | null> {
    const result = await this.service.userAsset(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserAsset)
  async createUserAsset(
    @graphql.Args() args: CreateUserAssetArgs
  ): Promise<UserAsset> {
    return await this.service.createUserAsset({
      ...args,
      data: {
        ...args.data,

        userInfo: args.data.userInfo
          ? {
              connect: args.data.userInfo,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserAsset)
  async updateUserAsset(
    @graphql.Args() args: UpdateUserAssetArgs
  ): Promise<UserAsset | null> {
    try {
      return await this.service.updateUserAsset({
        ...args,
        data: {
          ...args.data,

          userInfo: args.data.userInfo
            ? {
                connect: args.data.userInfo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserAsset)
  async deleteUserAsset(
    @graphql.Args() args: DeleteUserAssetArgs
  ): Promise<UserAsset | null> {
    try {
      return await this.service.deleteUserAsset(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserInfo, {
    nullable: true,
    name: "userInfo",
  })
  async getUserInfo(
    @graphql.Parent() parent: UserAsset
  ): Promise<UserInfo | null> {
    const result = await this.service.getUserInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
