/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserAsset, // @ts-ignore
  UserInfo,
} from "@prisma/client";

export class UserAssetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserAssetCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAssetCountArgs>
  ): Promise<number> {
    return this.prisma.userAsset.count(args);
  }

  async userAssets<T extends Prisma.UserAssetFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAssetFindManyArgs>
  ): Promise<UserAsset[]> {
    return this.prisma.userAsset.findMany(args);
  }
  async userAsset<T extends Prisma.UserAssetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAssetFindUniqueArgs>
  ): Promise<UserAsset | null> {
    return this.prisma.userAsset.findUnique(args);
  }
  async createUserAsset<T extends Prisma.UserAssetCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAssetCreateArgs>
  ): Promise<UserAsset> {
    return this.prisma.userAsset.create<T>(args);
  }
  async updateUserAsset<T extends Prisma.UserAssetUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAssetUpdateArgs>
  ): Promise<UserAsset> {
    return this.prisma.userAsset.update<T>(args);
  }
  async deleteUserAsset<T extends Prisma.UserAssetDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserAssetDeleteArgs>
  ): Promise<UserAsset> {
    return this.prisma.userAsset.delete(args);
  }

  async getUserInfo(parentId: string): Promise<UserInfo | null> {
    return this.prisma.userAsset
      .findUnique({
        where: { id: parentId },
      })
      .userInfo();
  }
}
