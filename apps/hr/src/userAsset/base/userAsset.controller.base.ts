/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserAssetService } from "../userAsset.service";
import { UserAssetCreateInput } from "./UserAssetCreateInput";
import { UserAsset } from "./UserAsset";
import { UserAssetFindManyArgs } from "./UserAssetFindManyArgs";
import { UserAssetWhereUniqueInput } from "./UserAssetWhereUniqueInput";
import { UserAssetUpdateInput } from "./UserAssetUpdateInput";

export class UserAssetControllerBase {
  constructor(protected readonly service: UserAssetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserAsset })
  @swagger.ApiBody({
    type: UserAssetCreateInput,
  })
  async createUserAsset(
    @common.Body() data: UserAssetCreateInput
  ): Promise<UserAsset> {
    return await this.service.createUserAsset({
      data: {
        ...data,

        userInfo: data.userInfo
          ? {
              connect: data.userInfo,
            }
          : undefined,
      },
      select: {
        assetId: true,
        id: true,
        status: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserAsset] })
  @ApiNestedQuery(UserAssetFindManyArgs)
  async userAssets(@common.Req() request: Request): Promise<UserAsset[]> {
    const args = plainToClass(UserAssetFindManyArgs, request.query);
    return this.service.userAssets({
      ...args,
      select: {
        assetId: true,
        id: true,
        status: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userAsset(
    @common.Param() params: UserAssetWhereUniqueInput
  ): Promise<UserAsset | null> {
    const result = await this.service.userAsset({
      where: params,
      select: {
        assetId: true,
        id: true,
        status: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: UserAssetUpdateInput,
  })
  async updateUserAsset(
    @common.Param() params: UserAssetWhereUniqueInput,
    @common.Body() data: UserAssetUpdateInput
  ): Promise<UserAsset | null> {
    try {
      return await this.service.updateUserAsset({
        where: params,
        data: {
          ...data,

          userInfo: data.userInfo
            ? {
                connect: data.userInfo,
              }
            : undefined,
        },
        select: {
          assetId: true,
          id: true,
          status: true,

          userInfo: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserAsset(
    @common.Param() params: UserAssetWhereUniqueInput
  ): Promise<UserAsset | null> {
    try {
      return await this.service.deleteUserAsset({
        where: params,
        select: {
          assetId: true,
          id: true,
          status: true,

          userInfo: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
