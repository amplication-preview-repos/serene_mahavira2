/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { GrpcMethod } from "@nestjs/microservices";
import { MasterdataAssetService } from "../masterdataAsset.service";
import { MasterdataAssetCreateInput } from "./MasterdataAssetCreateInput";
import { MasterdataAssetWhereInput } from "./MasterdataAssetWhereInput";
import { MasterdataAssetWhereUniqueInput } from "./MasterdataAssetWhereUniqueInput";
import { MasterdataAssetFindManyArgs } from "./MasterdataAssetFindManyArgs";
import { MasterdataAssetUpdateInput } from "./MasterdataAssetUpdateInput";
import { MasterdataAsset } from "./MasterdataAsset";

export class MasterdataAssetGrpcControllerBase {
  constructor(protected readonly service: MasterdataAssetService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: MasterdataAsset })
  @GrpcMethod("MasterdataAssetService", "createMasterdataAsset")
  async createMasterdataAsset(
    @common.Body() data: MasterdataAssetCreateInput
  ): Promise<MasterdataAsset> {
    return await this.service.createMasterdataAsset({
      data: data,
      select: {
        code: true,
        id: true,
        name: true,
        remainingAsset: true,
        totalAsset: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [MasterdataAsset] })
  @ApiNestedQuery(MasterdataAssetFindManyArgs)
  @GrpcMethod("MasterdataAssetService", "masterdataAssets")
  async masterdataAssets(
    @common.Req() request: Request
  ): Promise<MasterdataAsset[]> {
    const args = plainToClass(MasterdataAssetFindManyArgs, request.query);
    return this.service.masterdataAssets({
      ...args,
      select: {
        code: true,
        id: true,
        name: true,
        remainingAsset: true,
        totalAsset: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: MasterdataAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MasterdataAssetService", "masterdataAsset")
  async masterdataAsset(
    @common.Param() params: MasterdataAssetWhereUniqueInput
  ): Promise<MasterdataAsset | null> {
    const result = await this.service.masterdataAsset({
      where: params,
      select: {
        code: true,
        id: true,
        name: true,
        remainingAsset: true,
        totalAsset: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: MasterdataAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MasterdataAssetService", "updateMasterdataAsset")
  async updateMasterdataAsset(
    @common.Param() params: MasterdataAssetWhereUniqueInput,
    @common.Body() data: MasterdataAssetUpdateInput
  ): Promise<MasterdataAsset | null> {
    try {
      return await this.service.updateMasterdataAsset({
        where: params,
        data: data,
        select: {
          code: true,
          id: true,
          name: true,
          remainingAsset: true,
          totalAsset: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: MasterdataAsset })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @GrpcMethod("MasterdataAssetService", "deleteMasterdataAsset")
  async deleteMasterdataAsset(
    @common.Param() params: MasterdataAssetWhereUniqueInput
  ): Promise<MasterdataAsset | null> {
    try {
      return await this.service.deleteMasterdataAsset({
        where: params,
        select: {
          code: true,
          id: true,
          name: true,
          remainingAsset: true,
          totalAsset: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
