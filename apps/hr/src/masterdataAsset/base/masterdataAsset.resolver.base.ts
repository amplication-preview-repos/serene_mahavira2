/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MasterdataAsset } from "./MasterdataAsset";
import { MasterdataAssetCountArgs } from "./MasterdataAssetCountArgs";
import { MasterdataAssetFindManyArgs } from "./MasterdataAssetFindManyArgs";
import { MasterdataAssetFindUniqueArgs } from "./MasterdataAssetFindUniqueArgs";
import { CreateMasterdataAssetArgs } from "./CreateMasterdataAssetArgs";
import { UpdateMasterdataAssetArgs } from "./UpdateMasterdataAssetArgs";
import { DeleteMasterdataAssetArgs } from "./DeleteMasterdataAssetArgs";
import { MasterdataAssetService } from "../masterdataAsset.service";
@graphql.Resolver(() => MasterdataAsset)
export class MasterdataAssetResolverBase {
  constructor(protected readonly service: MasterdataAssetService) {}

  async _masterdataAssetsMeta(
    @graphql.Args() args: MasterdataAssetCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MasterdataAsset])
  async masterdataAssets(
    @graphql.Args() args: MasterdataAssetFindManyArgs
  ): Promise<MasterdataAsset[]> {
    return this.service.masterdataAssets(args);
  }

  @graphql.Query(() => MasterdataAsset, { nullable: true })
  async masterdataAsset(
    @graphql.Args() args: MasterdataAssetFindUniqueArgs
  ): Promise<MasterdataAsset | null> {
    const result = await this.service.masterdataAsset(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MasterdataAsset)
  async createMasterdataAsset(
    @graphql.Args() args: CreateMasterdataAssetArgs
  ): Promise<MasterdataAsset> {
    return await this.service.createMasterdataAsset({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MasterdataAsset)
  async updateMasterdataAsset(
    @graphql.Args() args: UpdateMasterdataAssetArgs
  ): Promise<MasterdataAsset | null> {
    try {
      return await this.service.updateMasterdataAsset({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MasterdataAsset)
  async deleteMasterdataAsset(
    @graphql.Args() args: DeleteMasterdataAssetArgs
  ): Promise<MasterdataAsset | null> {
    try {
      return await this.service.deleteMasterdataAsset(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
