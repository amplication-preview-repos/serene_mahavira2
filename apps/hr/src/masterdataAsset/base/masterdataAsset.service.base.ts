/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MasterdataAsset } from "@prisma/client";

export class MasterdataAssetServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MasterdataAssetCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataAssetCountArgs>
  ): Promise<number> {
    return this.prisma.masterdataAsset.count(args);
  }

  async masterdataAssets<T extends Prisma.MasterdataAssetFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataAssetFindManyArgs>
  ): Promise<MasterdataAsset[]> {
    return this.prisma.masterdataAsset.findMany(args);
  }
  async masterdataAsset<T extends Prisma.MasterdataAssetFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataAssetFindUniqueArgs>
  ): Promise<MasterdataAsset | null> {
    return this.prisma.masterdataAsset.findUnique(args);
  }
  async createMasterdataAsset<T extends Prisma.MasterdataAssetCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataAssetCreateArgs>
  ): Promise<MasterdataAsset> {
    return this.prisma.masterdataAsset.create<T>(args);
  }
  async updateMasterdataAsset<T extends Prisma.MasterdataAssetUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataAssetUpdateArgs>
  ): Promise<MasterdataAsset> {
    return this.prisma.masterdataAsset.update<T>(args);
  }
  async deleteMasterdataAsset<T extends Prisma.MasterdataAssetDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataAssetDeleteArgs>
  ): Promise<MasterdataAsset> {
    return this.prisma.masterdataAsset.delete(args);
  }
}
