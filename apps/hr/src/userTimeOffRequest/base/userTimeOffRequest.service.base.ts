/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserTimeOffRequest, // @ts-ignore
  UserInfo,
} from "@prisma/client";

export class UserTimeOffRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserTimeOffRequestCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserTimeOffRequestCountArgs>
  ): Promise<number> {
    return this.prisma.userTimeOffRequest.count(args);
  }

  async userTimeOffRequests<T extends Prisma.UserTimeOffRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserTimeOffRequestFindManyArgs>
  ): Promise<UserTimeOffRequest[]> {
    return this.prisma.userTimeOffRequest.findMany(args);
  }
  async userTimeOffRequest<T extends Prisma.UserTimeOffRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserTimeOffRequestFindUniqueArgs>
  ): Promise<UserTimeOffRequest | null> {
    return this.prisma.userTimeOffRequest.findUnique(args);
  }
  async createUserTimeOffRequest<T extends Prisma.UserTimeOffRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserTimeOffRequestCreateArgs>
  ): Promise<UserTimeOffRequest> {
    return this.prisma.userTimeOffRequest.create<T>(args);
  }
  async updateUserTimeOffRequest<T extends Prisma.UserTimeOffRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserTimeOffRequestUpdateArgs>
  ): Promise<UserTimeOffRequest> {
    return this.prisma.userTimeOffRequest.update<T>(args);
  }
  async deleteUserTimeOffRequest<T extends Prisma.UserTimeOffRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserTimeOffRequestDeleteArgs>
  ): Promise<UserTimeOffRequest> {
    return this.prisma.userTimeOffRequest.delete(args);
  }

  async getApproverInfo(parentId: string): Promise<UserInfo | null> {
    return this.prisma.userTimeOffRequest
      .findUnique({
        where: { id: parentId },
      })
      .approverInfo();
  }

  async getUserInfo(parentId: string): Promise<UserInfo | null> {
    return this.prisma.userTimeOffRequest
      .findUnique({
        where: { id: parentId },
      })
      .userInfo();
  }
}
