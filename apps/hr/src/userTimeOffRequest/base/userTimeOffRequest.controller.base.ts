/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserTimeOffRequestService } from "../userTimeOffRequest.service";
import { UserTimeOffRequestCreateInput } from "./UserTimeOffRequestCreateInput";
import { UserTimeOffRequest } from "./UserTimeOffRequest";
import { UserTimeOffRequestFindManyArgs } from "./UserTimeOffRequestFindManyArgs";
import { UserTimeOffRequestWhereUniqueInput } from "./UserTimeOffRequestWhereUniqueInput";
import { UserTimeOffRequestUpdateInput } from "./UserTimeOffRequestUpdateInput";

export class UserTimeOffRequestControllerBase {
  constructor(protected readonly service: UserTimeOffRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserTimeOffRequest })
  async createUserTimeOffRequest(
    @common.Body() data: UserTimeOffRequestCreateInput
  ): Promise<UserTimeOffRequest> {
    return await this.service.createUserTimeOffRequest({
      data: {
        ...data,

        approverInfo: data.approverInfo
          ? {
              connect: data.approverInfo,
            }
          : undefined,

        userInfo: data.userInfo
          ? {
              connect: data.userInfo,
            }
          : undefined,
      },
      select: {
        approverInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        note: true,
        numDays: true,
        periodEnd: true,
        periodStart: true,
        status: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserTimeOffRequest] })
  @ApiNestedQuery(UserTimeOffRequestFindManyArgs)
  async userTimeOffRequests(
    @common.Req() request: Request
  ): Promise<UserTimeOffRequest[]> {
    const args = plainToClass(UserTimeOffRequestFindManyArgs, request.query);
    return this.service.userTimeOffRequests({
      ...args,
      select: {
        approverInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        note: true,
        numDays: true,
        periodEnd: true,
        periodStart: true,
        status: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserTimeOffRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userTimeOffRequest(
    @common.Param() params: UserTimeOffRequestWhereUniqueInput
  ): Promise<UserTimeOffRequest | null> {
    const result = await this.service.userTimeOffRequest({
      where: params,
      select: {
        approverInfo: {
          select: {
            id: true,
          },
        },

        id: true,
        note: true,
        numDays: true,
        periodEnd: true,
        periodStart: true,
        status: true,

        userInfo: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserTimeOffRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateUserTimeOffRequest(
    @common.Param() params: UserTimeOffRequestWhereUniqueInput,
    @common.Body() data: UserTimeOffRequestUpdateInput
  ): Promise<UserTimeOffRequest | null> {
    try {
      return await this.service.updateUserTimeOffRequest({
        where: params,
        data: {
          ...data,

          approverInfo: data.approverInfo
            ? {
                connect: data.approverInfo,
              }
            : undefined,

          userInfo: data.userInfo
            ? {
                connect: data.userInfo,
              }
            : undefined,
        },
        select: {
          approverInfo: {
            select: {
              id: true,
            },
          },

          id: true,
          note: true,
          numDays: true,
          periodEnd: true,
          periodStart: true,
          status: true,

          userInfo: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserTimeOffRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserTimeOffRequest(
    @common.Param() params: UserTimeOffRequestWhereUniqueInput
  ): Promise<UserTimeOffRequest | null> {
    try {
      return await this.service.deleteUserTimeOffRequest({
        where: params,
        select: {
          approverInfo: {
            select: {
              id: true,
            },
          },

          id: true,
          note: true,
          numDays: true,
          periodEnd: true,
          periodStart: true,
          status: true,

          userInfo: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
