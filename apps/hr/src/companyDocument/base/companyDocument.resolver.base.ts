/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanyDocument } from "./CompanyDocument";
import { CompanyDocumentCountArgs } from "./CompanyDocumentCountArgs";
import { CompanyDocumentFindManyArgs } from "./CompanyDocumentFindManyArgs";
import { CompanyDocumentFindUniqueArgs } from "./CompanyDocumentFindUniqueArgs";
import { CreateCompanyDocumentArgs } from "./CreateCompanyDocumentArgs";
import { UpdateCompanyDocumentArgs } from "./UpdateCompanyDocumentArgs";
import { DeleteCompanyDocumentArgs } from "./DeleteCompanyDocumentArgs";
import { CompanyDocumentService } from "../companyDocument.service";
@graphql.Resolver(() => CompanyDocument)
export class CompanyDocumentResolverBase {
  constructor(protected readonly service: CompanyDocumentService) {}

  async _companyDocumentsMeta(
    @graphql.Args() args: CompanyDocumentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanyDocument])
  async companyDocuments(
    @graphql.Args() args: CompanyDocumentFindManyArgs
  ): Promise<CompanyDocument[]> {
    return this.service.companyDocuments(args);
  }

  @graphql.Query(() => CompanyDocument, { nullable: true })
  async companyDocument(
    @graphql.Args() args: CompanyDocumentFindUniqueArgs
  ): Promise<CompanyDocument | null> {
    const result = await this.service.companyDocument(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanyDocument)
  async createCompanyDocument(
    @graphql.Args() args: CreateCompanyDocumentArgs
  ): Promise<CompanyDocument> {
    return await this.service.createCompanyDocument({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CompanyDocument)
  async updateCompanyDocument(
    @graphql.Args() args: UpdateCompanyDocumentArgs
  ): Promise<CompanyDocument | null> {
    try {
      return await this.service.updateCompanyDocument({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanyDocument)
  async deleteCompanyDocument(
    @graphql.Args() args: DeleteCompanyDocumentArgs
  ): Promise<CompanyDocument | null> {
    try {
      return await this.service.deleteCompanyDocument(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
