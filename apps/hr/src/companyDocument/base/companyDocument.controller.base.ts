/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CompanyDocumentService } from "../companyDocument.service";
import { CompanyDocumentCreateInput } from "./CompanyDocumentCreateInput";
import { CompanyDocument } from "./CompanyDocument";
import { CompanyDocumentFindManyArgs } from "./CompanyDocumentFindManyArgs";
import { CompanyDocumentWhereUniqueInput } from "./CompanyDocumentWhereUniqueInput";
import { CompanyDocumentUpdateInput } from "./CompanyDocumentUpdateInput";

export class CompanyDocumentControllerBase {
  constructor(protected readonly service: CompanyDocumentService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CompanyDocument })
  async createCompanyDocument(
    @common.Body() data: CompanyDocumentCreateInput
  ): Promise<CompanyDocument> {
    return await this.service.createCompanyDocument({
      data: data,
      select: {
        description: true,
        fileSize: true,
        fileType: true,
        id: true,
        name: true,
        path: true,
        publishedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CompanyDocument] })
  @ApiNestedQuery(CompanyDocumentFindManyArgs)
  async companyDocuments(
    @common.Req() request: Request
  ): Promise<CompanyDocument[]> {
    const args = plainToClass(CompanyDocumentFindManyArgs, request.query);
    return this.service.companyDocuments({
      ...args,
      select: {
        description: true,
        fileSize: true,
        fileType: true,
        id: true,
        name: true,
        path: true,
        publishedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CompanyDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async companyDocument(
    @common.Param() params: CompanyDocumentWhereUniqueInput
  ): Promise<CompanyDocument | null> {
    const result = await this.service.companyDocument({
      where: params,
      select: {
        description: true,
        fileSize: true,
        fileType: true,
        id: true,
        name: true,
        path: true,
        publishedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CompanyDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCompanyDocument(
    @common.Param() params: CompanyDocumentWhereUniqueInput,
    @common.Body() data: CompanyDocumentUpdateInput
  ): Promise<CompanyDocument | null> {
    try {
      return await this.service.updateCompanyDocument({
        where: params,
        data: data,
        select: {
          description: true,
          fileSize: true,
          fileType: true,
          id: true,
          name: true,
          path: true,
          publishedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CompanyDocument })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCompanyDocument(
    @common.Param() params: CompanyDocumentWhereUniqueInput
  ): Promise<CompanyDocument | null> {
    try {
      return await this.service.deleteCompanyDocument({
        where: params,
        select: {
          description: true,
          fileSize: true,
          fileType: true,
          id: true,
          name: true,
          path: true,
          publishedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
