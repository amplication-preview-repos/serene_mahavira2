/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  CompanyRecognition, // @ts-ignore
  UserInfo,
} from "@prisma/client";

export class CompanyRecognitionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.CompanyRecognitionCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyRecognitionCountArgs>
  ): Promise<number> {
    return this.prisma.companyRecognition.count(args);
  }

  async companyRecognitions<T extends Prisma.CompanyRecognitionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyRecognitionFindManyArgs>
  ): Promise<CompanyRecognition[]> {
    return this.prisma.companyRecognition.findMany(args);
  }
  async companyRecognition<T extends Prisma.CompanyRecognitionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyRecognitionFindUniqueArgs>
  ): Promise<CompanyRecognition | null> {
    return this.prisma.companyRecognition.findUnique(args);
  }
  async createCompanyRecognition<T extends Prisma.CompanyRecognitionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyRecognitionCreateArgs>
  ): Promise<CompanyRecognition> {
    return this.prisma.companyRecognition.create<T>(args);
  }
  async updateCompanyRecognition<T extends Prisma.CompanyRecognitionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyRecognitionUpdateArgs>
  ): Promise<CompanyRecognition> {
    return this.prisma.companyRecognition.update<T>(args);
  }
  async deleteCompanyRecognition<T extends Prisma.CompanyRecognitionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompanyRecognitionDeleteArgs>
  ): Promise<CompanyRecognition> {
    return this.prisma.companyRecognition.delete(args);
  }

  async getRequesterInfo(parentId: string): Promise<UserInfo | null> {
    return this.prisma.companyRecognition
      .findUnique({
        where: { id: parentId },
      })
      .requesterInfo();
  }

  async getUserInfo(parentId: string): Promise<UserInfo | null> {
    return this.prisma.companyRecognition
      .findUnique({
        where: { id: parentId },
      })
      .userInfo();
  }
}
