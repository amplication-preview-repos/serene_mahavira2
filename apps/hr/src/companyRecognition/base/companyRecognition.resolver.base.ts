/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CompanyRecognition } from "./CompanyRecognition";
import { CompanyRecognitionCountArgs } from "./CompanyRecognitionCountArgs";
import { CompanyRecognitionFindManyArgs } from "./CompanyRecognitionFindManyArgs";
import { CompanyRecognitionFindUniqueArgs } from "./CompanyRecognitionFindUniqueArgs";
import { CreateCompanyRecognitionArgs } from "./CreateCompanyRecognitionArgs";
import { UpdateCompanyRecognitionArgs } from "./UpdateCompanyRecognitionArgs";
import { DeleteCompanyRecognitionArgs } from "./DeleteCompanyRecognitionArgs";
import { UserInfo } from "../../userInfo/base/UserInfo";
import { CompanyRecognitionService } from "../companyRecognition.service";
@graphql.Resolver(() => CompanyRecognition)
export class CompanyRecognitionResolverBase {
  constructor(protected readonly service: CompanyRecognitionService) {}

  async _companyRecognitionsMeta(
    @graphql.Args() args: CompanyRecognitionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CompanyRecognition])
  async companyRecognitions(
    @graphql.Args() args: CompanyRecognitionFindManyArgs
  ): Promise<CompanyRecognition[]> {
    return this.service.companyRecognitions(args);
  }

  @graphql.Query(() => CompanyRecognition, { nullable: true })
  async companyRecognition(
    @graphql.Args() args: CompanyRecognitionFindUniqueArgs
  ): Promise<CompanyRecognition | null> {
    const result = await this.service.companyRecognition(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CompanyRecognition)
  async createCompanyRecognition(
    @graphql.Args() args: CreateCompanyRecognitionArgs
  ): Promise<CompanyRecognition> {
    return await this.service.createCompanyRecognition({
      ...args,
      data: {
        ...args.data,

        requesterInfo: args.data.requesterInfo
          ? {
              connect: args.data.requesterInfo,
            }
          : undefined,

        userInfo: args.data.userInfo
          ? {
              connect: args.data.userInfo,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => CompanyRecognition)
  async updateCompanyRecognition(
    @graphql.Args() args: UpdateCompanyRecognitionArgs
  ): Promise<CompanyRecognition | null> {
    try {
      return await this.service.updateCompanyRecognition({
        ...args,
        data: {
          ...args.data,

          requesterInfo: args.data.requesterInfo
            ? {
                connect: args.data.requesterInfo,
              }
            : undefined,

          userInfo: args.data.userInfo
            ? {
                connect: args.data.userInfo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CompanyRecognition)
  async deleteCompanyRecognition(
    @graphql.Args() args: DeleteCompanyRecognitionArgs
  ): Promise<CompanyRecognition | null> {
    try {
      return await this.service.deleteCompanyRecognition(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserInfo, {
    nullable: true,
    name: "requesterInfo",
  })
  async getRequesterInfo(
    @graphql.Parent() parent: CompanyRecognition
  ): Promise<UserInfo | null> {
    const result = await this.service.getRequesterInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserInfo, {
    nullable: true,
    name: "userInfo",
  })
  async getUserInfo(
    @graphql.Parent() parent: CompanyRecognition
  ): Promise<UserInfo | null> {
    const result = await this.service.getUserInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
