/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { UserExpenseRequestService } from "../userExpenseRequest.service";
import { UserExpenseRequestCreateInput } from "./UserExpenseRequestCreateInput";
import { UserExpenseRequest } from "./UserExpenseRequest";
import { UserExpenseRequestFindManyArgs } from "./UserExpenseRequestFindManyArgs";
import { UserExpenseRequestWhereUniqueInput } from "./UserExpenseRequestWhereUniqueInput";
import { UserExpenseRequestUpdateInput } from "./UserExpenseRequestUpdateInput";

export class UserExpenseRequestControllerBase {
  constructor(protected readonly service: UserExpenseRequestService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: UserExpenseRequest })
  @swagger.ApiBody({
    type: UserExpenseRequestCreateInput,
  })
  async createUserExpenseRequest(
    @common.Body() data: UserExpenseRequestCreateInput
  ): Promise<UserExpenseRequest> {
    return await this.service.createUserExpenseRequest({
      data: {
        ...data,

        approverInfo: data.approverInfo
          ? {
              connect: data.approverInfo,
            }
          : undefined,

        requesterInfo: data.requesterInfo
          ? {
              connect: data.requesterInfo,
            }
          : undefined,
      },
      select: {
        approvedAt: true,

        approverInfo: {
          select: {
            id: true,
          },
        },

        attachments: true,
        category: true,
        id: true,
        note: true,
        purchaseDate: true,
        requestedAt: true,

        requesterInfo: {
          select: {
            id: true,
          },
        },

        status: true,
        taxAmount: true,
        title: true,
        totalAmount: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [UserExpenseRequest] })
  @ApiNestedQuery(UserExpenseRequestFindManyArgs)
  async userExpenseRequests(
    @common.Req() request: Request
  ): Promise<UserExpenseRequest[]> {
    const args = plainToClass(UserExpenseRequestFindManyArgs, request.query);
    return this.service.userExpenseRequests({
      ...args,
      select: {
        approvedAt: true,

        approverInfo: {
          select: {
            id: true,
          },
        },

        attachments: true,
        category: true,
        id: true,
        note: true,
        purchaseDate: true,
        requestedAt: true,

        requesterInfo: {
          select: {
            id: true,
          },
        },

        status: true,
        taxAmount: true,
        title: true,
        totalAmount: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: UserExpenseRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async userExpenseRequest(
    @common.Param() params: UserExpenseRequestWhereUniqueInput
  ): Promise<UserExpenseRequest | null> {
    const result = await this.service.userExpenseRequest({
      where: params,
      select: {
        approvedAt: true,

        approverInfo: {
          select: {
            id: true,
          },
        },

        attachments: true,
        category: true,
        id: true,
        note: true,
        purchaseDate: true,
        requestedAt: true,

        requesterInfo: {
          select: {
            id: true,
          },
        },

        status: true,
        taxAmount: true,
        title: true,
        totalAmount: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: UserExpenseRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @swagger.ApiBody({
    type: UserExpenseRequestUpdateInput,
  })
  async updateUserExpenseRequest(
    @common.Param() params: UserExpenseRequestWhereUniqueInput,
    @common.Body() data: UserExpenseRequestUpdateInput
  ): Promise<UserExpenseRequest | null> {
    try {
      return await this.service.updateUserExpenseRequest({
        where: params,
        data: {
          ...data,

          approverInfo: data.approverInfo
            ? {
                connect: data.approverInfo,
              }
            : undefined,

          requesterInfo: data.requesterInfo
            ? {
                connect: data.requesterInfo,
              }
            : undefined,
        },
        select: {
          approvedAt: true,

          approverInfo: {
            select: {
              id: true,
            },
          },

          attachments: true,
          category: true,
          id: true,
          note: true,
          purchaseDate: true,
          requestedAt: true,

          requesterInfo: {
            select: {
              id: true,
            },
          },

          status: true,
          taxAmount: true,
          title: true,
          totalAmount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: UserExpenseRequest })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteUserExpenseRequest(
    @common.Param() params: UserExpenseRequestWhereUniqueInput
  ): Promise<UserExpenseRequest | null> {
    try {
      return await this.service.deleteUserExpenseRequest({
        where: params,
        select: {
          approvedAt: true,

          approverInfo: {
            select: {
              id: true,
            },
          },

          attachments: true,
          category: true,
          id: true,
          note: true,
          purchaseDate: true,
          requestedAt: true,

          requesterInfo: {
            select: {
              id: true,
            },
          },

          status: true,
          taxAmount: true,
          title: true,
          totalAmount: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
