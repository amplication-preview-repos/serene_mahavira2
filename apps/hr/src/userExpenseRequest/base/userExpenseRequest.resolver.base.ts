/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { UserExpenseRequest } from "./UserExpenseRequest";
import { UserExpenseRequestCountArgs } from "./UserExpenseRequestCountArgs";
import { UserExpenseRequestFindManyArgs } from "./UserExpenseRequestFindManyArgs";
import { UserExpenseRequestFindUniqueArgs } from "./UserExpenseRequestFindUniqueArgs";
import { CreateUserExpenseRequestArgs } from "./CreateUserExpenseRequestArgs";
import { UpdateUserExpenseRequestArgs } from "./UpdateUserExpenseRequestArgs";
import { DeleteUserExpenseRequestArgs } from "./DeleteUserExpenseRequestArgs";
import { UserInfo } from "../../userInfo/base/UserInfo";
import { UserExpenseRequestService } from "../userExpenseRequest.service";
@graphql.Resolver(() => UserExpenseRequest)
export class UserExpenseRequestResolverBase {
  constructor(protected readonly service: UserExpenseRequestService) {}

  async _userExpenseRequestsMeta(
    @graphql.Args() args: UserExpenseRequestCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [UserExpenseRequest])
  async userExpenseRequests(
    @graphql.Args() args: UserExpenseRequestFindManyArgs
  ): Promise<UserExpenseRequest[]> {
    return this.service.userExpenseRequests(args);
  }

  @graphql.Query(() => UserExpenseRequest, { nullable: true })
  async userExpenseRequest(
    @graphql.Args() args: UserExpenseRequestFindUniqueArgs
  ): Promise<UserExpenseRequest | null> {
    const result = await this.service.userExpenseRequest(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => UserExpenseRequest)
  async createUserExpenseRequest(
    @graphql.Args() args: CreateUserExpenseRequestArgs
  ): Promise<UserExpenseRequest> {
    return await this.service.createUserExpenseRequest({
      ...args,
      data: {
        ...args.data,

        approverInfo: args.data.approverInfo
          ? {
              connect: args.data.approverInfo,
            }
          : undefined,

        requesterInfo: args.data.requesterInfo
          ? {
              connect: args.data.requesterInfo,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => UserExpenseRequest)
  async updateUserExpenseRequest(
    @graphql.Args() args: UpdateUserExpenseRequestArgs
  ): Promise<UserExpenseRequest | null> {
    try {
      return await this.service.updateUserExpenseRequest({
        ...args,
        data: {
          ...args.data,

          approverInfo: args.data.approverInfo
            ? {
                connect: args.data.approverInfo,
              }
            : undefined,

          requesterInfo: args.data.requesterInfo
            ? {
                connect: args.data.requesterInfo,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserExpenseRequest)
  async deleteUserExpenseRequest(
    @graphql.Args() args: DeleteUserExpenseRequestArgs
  ): Promise<UserExpenseRequest | null> {
    try {
      return await this.service.deleteUserExpenseRequest(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => UserInfo, {
    nullable: true,
    name: "approverInfo",
  })
  async getApproverInfo(
    @graphql.Parent() parent: UserExpenseRequest
  ): Promise<UserInfo | null> {
    const result = await this.service.getApproverInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => UserInfo, {
    nullable: true,
    name: "requesterInfo",
  })
  async getRequesterInfo(
    @graphql.Parent() parent: UserExpenseRequest
  ): Promise<UserInfo | null> {
    const result = await this.service.getRequesterInfo(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
