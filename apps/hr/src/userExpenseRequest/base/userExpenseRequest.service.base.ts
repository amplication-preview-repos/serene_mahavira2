/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  UserExpenseRequest, // @ts-ignore
  UserInfo,
} from "@prisma/client";

export class UserExpenseRequestServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.UserExpenseRequestCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserExpenseRequestCountArgs>
  ): Promise<number> {
    return this.prisma.userExpenseRequest.count(args);
  }

  async userExpenseRequests<T extends Prisma.UserExpenseRequestFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserExpenseRequestFindManyArgs>
  ): Promise<UserExpenseRequest[]> {
    return this.prisma.userExpenseRequest.findMany(args);
  }
  async userExpenseRequest<T extends Prisma.UserExpenseRequestFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserExpenseRequestFindUniqueArgs>
  ): Promise<UserExpenseRequest | null> {
    return this.prisma.userExpenseRequest.findUnique(args);
  }
  async createUserExpenseRequest<T extends Prisma.UserExpenseRequestCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserExpenseRequestCreateArgs>
  ): Promise<UserExpenseRequest> {
    return this.prisma.userExpenseRequest.create<T>(args);
  }
  async updateUserExpenseRequest<T extends Prisma.UserExpenseRequestUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserExpenseRequestUpdateArgs>
  ): Promise<UserExpenseRequest> {
    return this.prisma.userExpenseRequest.update<T>(args);
  }
  async deleteUserExpenseRequest<T extends Prisma.UserExpenseRequestDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.UserExpenseRequestDeleteArgs>
  ): Promise<UserExpenseRequest> {
    return this.prisma.userExpenseRequest.delete(args);
  }

  async getApproverInfo(parentId: string): Promise<UserInfo | null> {
    return this.prisma.userExpenseRequest
      .findUnique({
        where: { id: parentId },
      })
      .approverInfo();
  }

  async getRequesterInfo(parentId: string): Promise<UserInfo | null> {
    return this.prisma.userExpenseRequest
      .findUnique({
        where: { id: parentId },
      })
      .requesterInfo();
  }
}
