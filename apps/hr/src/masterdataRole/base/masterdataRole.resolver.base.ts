/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MasterdataRole } from "./MasterdataRole";
import { MasterdataRoleCountArgs } from "./MasterdataRoleCountArgs";
import { MasterdataRoleFindManyArgs } from "./MasterdataRoleFindManyArgs";
import { MasterdataRoleFindUniqueArgs } from "./MasterdataRoleFindUniqueArgs";
import { CreateMasterdataRoleArgs } from "./CreateMasterdataRoleArgs";
import { UpdateMasterdataRoleArgs } from "./UpdateMasterdataRoleArgs";
import { DeleteMasterdataRoleArgs } from "./DeleteMasterdataRoleArgs";
import { MasterdataRoleService } from "../masterdataRole.service";
@graphql.Resolver(() => MasterdataRole)
export class MasterdataRoleResolverBase {
  constructor(protected readonly service: MasterdataRoleService) {}

  async _masterdataRolesMeta(
    @graphql.Args() args: MasterdataRoleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MasterdataRole])
  async masterdataRoles(
    @graphql.Args() args: MasterdataRoleFindManyArgs
  ): Promise<MasterdataRole[]> {
    return this.service.masterdataRoles(args);
  }

  @graphql.Query(() => MasterdataRole, { nullable: true })
  async masterdataRole(
    @graphql.Args() args: MasterdataRoleFindUniqueArgs
  ): Promise<MasterdataRole | null> {
    const result = await this.service.masterdataRole(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MasterdataRole)
  async createMasterdataRole(
    @graphql.Args() args: CreateMasterdataRoleArgs
  ): Promise<MasterdataRole> {
    return await this.service.createMasterdataRole({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MasterdataRole)
  async updateMasterdataRole(
    @graphql.Args() args: UpdateMasterdataRoleArgs
  ): Promise<MasterdataRole | null> {
    try {
      return await this.service.updateMasterdataRole({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MasterdataRole)
  async deleteMasterdataRole(
    @graphql.Args() args: DeleteMasterdataRoleArgs
  ): Promise<MasterdataRole | null> {
    try {
      return await this.service.deleteMasterdataRole(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
