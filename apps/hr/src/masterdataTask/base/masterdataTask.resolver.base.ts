/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { MasterdataTask } from "./MasterdataTask";
import { MasterdataTaskCountArgs } from "./MasterdataTaskCountArgs";
import { MasterdataTaskFindManyArgs } from "./MasterdataTaskFindManyArgs";
import { MasterdataTaskFindUniqueArgs } from "./MasterdataTaskFindUniqueArgs";
import { CreateMasterdataTaskArgs } from "./CreateMasterdataTaskArgs";
import { UpdateMasterdataTaskArgs } from "./UpdateMasterdataTaskArgs";
import { DeleteMasterdataTaskArgs } from "./DeleteMasterdataTaskArgs";
import { MasterdataTaskService } from "../masterdataTask.service";
@graphql.Resolver(() => MasterdataTask)
export class MasterdataTaskResolverBase {
  constructor(protected readonly service: MasterdataTaskService) {}

  async _masterdataTasksMeta(
    @graphql.Args() args: MasterdataTaskCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [MasterdataTask])
  async masterdataTasks(
    @graphql.Args() args: MasterdataTaskFindManyArgs
  ): Promise<MasterdataTask[]> {
    return this.service.masterdataTasks(args);
  }

  @graphql.Query(() => MasterdataTask, { nullable: true })
  async masterdataTask(
    @graphql.Args() args: MasterdataTaskFindUniqueArgs
  ): Promise<MasterdataTask | null> {
    const result = await this.service.masterdataTask(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => MasterdataTask)
  async createMasterdataTask(
    @graphql.Args() args: CreateMasterdataTaskArgs
  ): Promise<MasterdataTask> {
    return await this.service.createMasterdataTask({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => MasterdataTask)
  async updateMasterdataTask(
    @graphql.Args() args: UpdateMasterdataTaskArgs
  ): Promise<MasterdataTask | null> {
    try {
      return await this.service.updateMasterdataTask({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => MasterdataTask)
  async deleteMasterdataTask(
    @graphql.Args() args: DeleteMasterdataTaskArgs
  ): Promise<MasterdataTask | null> {
    try {
      return await this.service.deleteMasterdataTask(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
