/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, MasterdataTask } from "@prisma/client";

export class MasterdataTaskServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.MasterdataTaskCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataTaskCountArgs>
  ): Promise<number> {
    return this.prisma.masterdataTask.count(args);
  }

  async masterdataTasks<T extends Prisma.MasterdataTaskFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataTaskFindManyArgs>
  ): Promise<MasterdataTask[]> {
    return this.prisma.masterdataTask.findMany(args);
  }
  async masterdataTask<T extends Prisma.MasterdataTaskFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataTaskFindUniqueArgs>
  ): Promise<MasterdataTask | null> {
    return this.prisma.masterdataTask.findUnique(args);
  }
  async createMasterdataTask<T extends Prisma.MasterdataTaskCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataTaskCreateArgs>
  ): Promise<MasterdataTask> {
    return this.prisma.masterdataTask.create<T>(args);
  }
  async updateMasterdataTask<T extends Prisma.MasterdataTaskUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataTaskUpdateArgs>
  ): Promise<MasterdataTask> {
    return this.prisma.masterdataTask.update<T>(args);
  }
  async deleteMasterdataTask<T extends Prisma.MasterdataTaskDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.MasterdataTaskDeleteArgs>
  ): Promise<MasterdataTask> {
    return this.prisma.masterdataTask.delete(args);
  }
}
